%{
#include "SyntacticActions.h"
#include "gramatica.tab.hpp"
#include "../IntermediateCodeGenerator/IntermediateCodeGenerator.h"
%}

%token SHORT UINT DOUBLE VOID CLASS INTERFACE IMPLEMENT IMPL
%token IF ELSE END_IF PRINT FOR IN RANGE RETURN

%union {
        int number = 0;
        char *string;
}

%token <string> LESS_EQUAL GREATER_EQUAL EQUAL NOT_EQUAL PLUS_EQUAL // Operadores de comparación
%token <string> ID STRING CTE_SHORT CTE_UINT CTE_DOUBLE
%type <string> factor constante expresion asignador termino expresion_parentesis comparador condicion bloque_sentencias asignacion seleccion argumentos
%type <string> bloque_else bloque_if argumento_bucle_for acceso_atributo encabezado_funcion sentencias_metodo sentencias_funcion_local parametro
%type <string> encabezado_for encabezado_implement

%left '=' PLUS_EQUAL  // Asociatividad izquierda para asignación y asignación con adición
%left '.'  // Asociatividad izquierda para acceso a atributos y métodos

%start programa

%%

programa        : '{' sentencias '}'
                | '{' sentencias        { Logger::logError("Se esperaba llave como fin del programa") }
                | sentencias '}'        { Logger::logError("Se esperaba llave como inicion del programa") }
                ;

sentencias      : sentencia
                | sentencias sentencia
                ;

sentencia       : declarativa ','
                | ejecutable ','
                ;

declarativa     : declaracion_variables
                | clase_declaration
                | objeto_declaration
                | interface_declaration
                | implement_declaration
                | distributed_method_implementation
                | funcion_declaration
                ;

ejecutable      : asignacion
                | invocacion
                | seleccion
                | print
                | bucle_for
                | acceso_atributo
                | retorno       { if(SyntacticActions::checkReturnScope()) IntermediateCodeGenerator::returnStatement(); }
                ;

declaracion_variables   : tipo lista_variables          { Logger::infoMsg("Declaracion de variables") }
                        | error lista_variables         { Logger::logError("Falta especificar el tipo de las variables") }
                        ;

lista_variables : lista_variables ';' ID        { if(!SyntacticActions::checkRedeclaration($3)){
                                                        IntermediateCodeGenerator::setVarScope($3);
                                                        SyntacticActions::setIdType($3);
                                                        SyntacticActions::setIdUse($3, "variable");
                                                }
                                        }
                | ID                            { if(!SyntacticActions::checkRedeclaration($1)){
                                                        IntermediateCodeGenerator::setVarScope($1);
                                                        SyntacticActions::setIdType($1);
                                                        SyntacticActions::setIdUse($1, "variable");
                                                }
                                        }
                | ID error ','    { Logger::logError("declaracion de variables invalida") }
                ;

encabezado_clase        : CLASS ID      {
                                        if (SyntacticActions::checkRedeclaration($2)) {
                                                IntermediateCodeGenerator::isInvalidScope = true;
                                                IntermediateCodeGenerator::addScope("remove");
                                        } else {
                                                IntermediateCodeGenerator::setVarScope($2);
                                                SyntacticActions::setIdUse($2, "nombre-clase");
                                                IntermediateCodeGenerator::addScope($2);
                                        }
}
                        ;

clase_declaration       : encabezado_clase '{' atributos metodos_clase herencia_composicion '}' { Logger::infoMsg("Declaracion de clase");
                                                                                                IntermediateCodeGenerator::onScopeFinished() }
                        ;

encabezado_interfaz     : INTERFACE ID          { if (SyntacticActions::checkRedeclaration($2)) {
                                                        IntermediateCodeGenerator::isInvalidScope = true;
                                                        IntermediateCodeGenerator::addScope("remove");
                                                } else {
                                                        IntermediateCodeGenerator::setVarScope($2);
                                                        SyntacticActions::setIdUse($2, "nombre-interfaz");
                                                        IntermediateCodeGenerator::addScope($2);
                                                }
                                                }
                        ;

interface_declaration   : encabezado_interfaz '{' interface_metodos '}' { Logger::infoMsg("Declaracion de interfaz");
                                                                IntermediateCodeGenerator::onScopeFinished() }
                        ;

interface_metodos       : interface_metodos interface_metodo_declaration
                        |
                        ;

interface_metodo_declaration    : encabezado_funcion '(' parametro ')' ',' { Logger::infoMsg("Declaracion de metodo de interfaz");
                                                                                SyntacticActions::addParamToMethod($1, $3);
                                                                                IntermediateCodeGenerator::onScopeFinished() }
                                ;

encabezado_implement    : CLASS ID IMPLEMENT ID         { if(SyntacticActions::checkDeclaredClass($4)){
                                                                IntermediateCodeGenerator::setVarScope($2);
                                                                SyntacticActions::setIdUse($2, "nombre-clase");
                                                                IntermediateCodeGenerator::addScope($2);
                                                                SyntacticActions::addClassComposition($4);
                                                                $$ = $4;
                                                        }else{
                                                                IntermediateCodeGenerator::isInvalidScope = true;
                                                                IntermediateCodeGenerator::addScope("remove");
                                                        }
                                                        }
                        ;

// Ver como eliminar simbolos y tercetos creados si no implementa todos los metodos de la interfaz
implement_declaration   : encabezado_implement '{' atributos metodos_clase '}'    { Logger::infoMsg("Implementacion de interfaz");
                                                                                if(!IntermediateCodeGenerator::isInvalidScope && !SyntacticActions::classImplementsInterfaceMethods($1)){
                                                                                        IntermediateCodeGenerator::isInvalidScope = true;
                                                                                        IntermediateCodeGenerator::addScope("remove");
                                                                                }
                                                                                IntermediateCodeGenerator::onScopeFinished();
                                                                        }
                        ;

atributos               : atributos atributo_declaration
                        |
                        ;

atributo_declaration    : declaracion_variables ',' { Logger::infoMsg("Declaracion de atributos de clase") }
                        ;

metodos_clase   : metodos_clase metodo_declaration
                |
                ;

metodo_declaration      : funcion_declaration ',' { Logger::infoMsg("Declaracion de metodo") }
                        ;

encabezado_funcion      : VOID ID       { if(!SyntacticActions::checkRedeclaration($2)){
                                                IntermediateCodeGenerator::setVarScope($2);
                                                SyntacticActions::setIdUse($2, "nombre-funcion");
                                                string aux = $2;
                                                string label = "inic_" + aux;
                                                IntermediateCodeGenerator::addLabelTerceto(label);
                                                IntermediateCodeGenerator::addScope($2);
                                                $$ = $2;
                                        }
                                }
                        ;

funcion_declaration     : encabezado_funcion '(' parametro ')' '{' sentencias_metodo '}' { Logger::infoMsg("Declaracion de funcion");
                                                                                        SyntacticActions::addParamToMethod($1, $3);
                                                                                        IntermediateCodeGenerator::onScopeFinished($6); }
                        |
                        ;

// TODO 2 Informar error cuando se quiera heredar en una implementacion de interfaz
herencia_composicion    : ID ','   { SyntacticActions::addClassComposition($1); }
                        |
                        ;

sentencias_metodo       : sentencias_metodo declaracion_variables ','   { $$ = IntermediateCodeGenerator::getLastTerceto() }
                        | sentencias_metodo ejecutable ','              { $$ = IntermediateCodeGenerator::getLastTerceto() }
                        | sentencias_metodo local_function_declaration ','      { $$ = IntermediateCodeGenerator::getLastTerceto() }
                        |                                               { $$ = IntermediateCodeGenerator::getLastTerceto() }
                        ;

local_function_declaration      :  encabezado_funcion '(' parametro ')' '{' sentencias_funcion_local '}' {      Logger::infoMsg("Declaracion de funcion local");
                                                                                                                SyntacticActions::addParamToMethod($1, $3);
                                                                                                                IntermediateCodeGenerator::onScopeFinished($6) }
                                ;

sentencias_funcion_local        : sentencias_funcion_local declaracion_variables ','    { $$ = IntermediateCodeGenerator::getLastTerceto() }
                                | sentencias_funcion_local ejecutable ','               { $$ = IntermediateCodeGenerator::getLastTerceto() }
                                | sentencias_funcion_local local_function_declaration ',' { Logger::logError("No se permite anidamiento multiple de funciones locales");
                                                                                                $$ = IntermediateCodeGenerator::getLastTerceto() }
                                |                                                       { $$ = IntermediateCodeGenerator::getLastTerceto() }
                                ;

parametro       : tipo ID       { 
                                        IntermediateCodeGenerator::setVarScope($2);
        SyntacticActions::setIdType($2);
                                SyntacticActions::setIdUse($2, "parametro");
                                $$ = $2;
                                 }
                | ID                    { Logger::logError("Falta el tipo del argumento") }
                | parametro ';' tipo ID { Logger::logError("Solo se permite un parametro en declaracion de funcion") }
                | { $$ = NULL; }
                ;

distributed_method_implementation       : IMPL FOR ID ':' '{' metodos_clase '}'    { Logger::infoMsg("Declaracion distribuida de metodos");
                                                                                        SyntacticActions::checkDeclaredClass($3) }
                                        ;
                        
retorno                 : RETURN
                        ;

objeto_declaration      : ID lista_objetos      { if(SyntacticActions::checkDeclaredClass($1)) {
                                                        SyntacticActions::lastType = $1;
                                                        SyntacticActions::addClassToObjects($1);
                                                }
                                                Logger::infoMsg("Declaracion de objeto") }
                        ;

lista_objetos           : lista_objetos ';' objeto
                        | objeto
                        ;

objeto          : ID    { if(!SyntacticActions::checkRedeclaration($1)){
                                IntermediateCodeGenerator::setVarScope($1);
                                SyntacticActions::setIdType($1);
                                SyntacticActions::setIdUse($1, "variable-objeto");
                                SyntacticActions::addObject($1);
                        }
                }
                ;

asignacion      : ID asignador expresion        { Logger::infoMsg("Asignacion simple");
                                                if(SyntacticActions::checkDeclaredVar($1) && SyntacticActions::checkTypes($1, $3)) IntermediateCodeGenerator::addTerceto($2, $1, $3); }
                | ID '.' ID asignador expresion  { Logger::infoMsg("Asignacion de atributo");
                                if(SyntacticActions::checkDeclaredVar($1) && SyntacticActions::checkHasMember($1, $3, NULL, $5)) {
                                        char *aux = (char*) malloc(sizeof($1) + sizeof($3) + 2);
                                        sprintf(aux, "%s.%s", $1, $3);
                                        IntermediateCodeGenerator::addTerceto($4, aux, $5);
                                }
                        }
                | ID asignador  { Logger::logError("Asignacion vacia") }
                | ID '.' ID asignador    { Logger::logError("Asignacion vacia") }
                | ID asignador '-'       { Logger::logError("Asignacion vacia") }
                ;

asignador       : '=' { 
                        char *aux = (char*) malloc(sizeof(char) * 2);
                        aux[0] = '=';
                        aux[1] = '\0';
                        $$ = aux;
                }
                | PLUS_EQUAL { 
                        char *aux = (char*) malloc(sizeof(char) * 3);
                        aux[0] = '+';
                        aux[1] = '=';
                        aux[2] = '\0';
                        $$ = aux;
                 }
                ;

invocacion      : ID '(' argumentos ')' { Logger::infoMsg("Invocacion de funcion");
                                if(SyntacticActions::checkDeclaredMethod($1) && SyntacticActions::checkParameters($1, $3)) IntermediateCodeGenerator::addTerceto("INVOKE", $1, $3); }
                | ID '.' ID '(' argumentos ')'  { Logger::infoMsg("Invocacion de metodo");
                        if(SyntacticActions::checkDeclaredVar($1) && SyntacticActions::checkHasMember($1, $3, $5)){
                                char *aux = (char*) malloc(sizeof($1) + sizeof($3) + 2);
                                sprintf(aux, "%s.%s", $1, $3);
                                IntermediateCodeGenerator::addTerceto("INVOKE", aux, $5);
                                }
                        }
                ;

argumentos      : expresion { $$ = $1; }
                | argumentos ';' expresion      { Logger::logError("Solo se permite un argumento en invocacion de funcion") }
                | { char *aux = (char*) malloc(2);
                        aux[0] = '-';
                        $$ = aux; }
                ;

seleccion       : IF '(' condicion ')' bloque_if ELSE bloque_else END_IF  { Logger::infoMsg("Sentencia IF completa");
                                                                                IntermediateCodeGenerator::ifElseExpression($3, $5, $7); }
                | IF '(' condicion ')' bloque_if END_IF         { Logger::infoMsg("Sentencia IF sin ELSE");
                                                                        IntermediateCodeGenerator::ifExpression($3, $5); }
                | IF '(' condicion ')' bloque_if        { Logger::logError("Falta sentencia END_IF") }
                | IF '(' condicion ')' bloque_if ELSE bloque_else       { Logger::logError("Falta sentencia END_IF") }
                ;

bloque_if       : bloque_sentencias { IntermediateCodeGenerator::addTerceto("BI", "", "-");
                                        IntermediateCodeGenerator::addStack(IntermediateCodeGenerator::lastTerceto);
                                        IntermediateCodeGenerator::addLabelTerceto();
                                        $$ = IntermediateCodeGenerator::getLastTerceto() }

bloque_else     : bloque_sentencias

condicion       : expresion comparador expresion        { Logger::infoMsg("Condicion de control");
                                                                IntermediateCodeGenerator::addTerceto($2, $1, $3);
                                                                IntermediateCodeGenerator::endCondition();
                                                                $$ = IntermediateCodeGenerator::getLastTerceto(); }
                | expresion comparador          { Logger::logError("Se esperaba expresion en lado derecho de comparacion") }
                | comparador expresion          { Logger::logError("Se esperaba expresion en lado izquierdo de comparacion") }
                | expresion                     { Logger::logError("Se esperaba un operador de comparacion") }
                ;

comparador      : '<' { 
                        char *aux = (char*) malloc(sizeof(char) * 2);
                        aux[0] = '<';
                        aux[1] = '\0';
                        $$ = aux;
                }
                | '>' {
                        char *aux = (char*) malloc(sizeof(char) * 2);
                        aux[0] = '>';
                        aux[1] = '\0';
                        $$ = aux;
                }
                | LESS_EQUAL {
                        char *aux = (char*) malloc(sizeof(char) * 3);
                        aux[0] = '<';
                        aux[1] = '=';
                        aux[2] = '\0';
                        $$ = aux;
                }
                | GREATER_EQUAL {
                        char *aux = (char*) malloc(sizeof(char) * 3);
                        aux[0] = '>';
                        aux[1] = '=';
                        aux[2] = '\0';
                        $$ = aux;
                }
                | EQUAL {
                        char *aux = (char*) malloc(sizeof(char) * 3);
                        aux[0] = '=';
                        aux[1] = '=';
                        aux[2] = '\0';
                        $$ = aux;
                }
                | NOT_EQUAL {
                        char *aux = (char*) malloc(sizeof(char) * 3);
                        aux[0] = '!';
                        aux[1] = '=';
                        aux[2] = '\0';
                        $$ = aux;
                }
                ;
        
bloque_sentencias       : sentencia { $$ = IntermediateCodeGenerator::getLastTerceto(); }
                        | '{' sentencias '}' { $$ = IntermediateCodeGenerator::getLastTerceto(); }
                        ;

print   : PRINT STRING  { Logger::infoMsg("Sentencia PRINT");
                        IntermediateCodeGenerator::addTerceto("PRINT", $2, "-"); }
        | PRINT         { Logger::logError("Se esperaba cadena para imprimir") }
        | STRING        { Logger::logError("Falta sentencia PRINT") }
        ;

bucle_for       : encabezado_for '(' argumento_bucle_for ')' bloque_sentencias { if(!IntermediateCodeGenerator::isInvalidScope){
                                                                                        IntermediateCodeGenerator::forBlock($1, $5);
                                                                                }
                                                                                IntermediateCodeGenerator::onScopeFinished();
                                                                                }
                | encabezado_for '(' argumento_bucle_for bloque_sentencias    { Logger::logWarning("Falta parentesis en los argumentos del bloque for");
                                                                                if(!IntermediateCodeGenerator::isInvalidScope){
                                                                                        IntermediateCodeGenerator::forBlock($1, $4);
                                                                                }
                                                                                IntermediateCodeGenerator::onScopeFinished();
                                                                                }
                | encabezado_for argumento_bucle_for ')' bloque_sentencias    { Logger::logWarning("Falta parentesis en los argumentos del bloque for");
                                                                                if(!IntermediateCodeGenerator::isInvalidScope){
                                                                                        IntermediateCodeGenerator::forBlock($1, $4);
                                                                                }
                                                                                IntermediateCodeGenerator::onScopeFinished();
                                                                                }
                ;

encabezado_for  : FOR ID IN RANGE       { $$ = $2;
                                        IntermediateCodeGenerator::addScope("for");
                                        if(!SyntacticActions::checkRedeclaration($2)){
                                                IntermediateCodeGenerator::setVarScope($2);
                                                SyntacticActions::setIdUse($2, "variable");
                                                SyntacticActions::lastType = "short";
                                                SyntacticActions::setIdType($2); }
                                        }
                | ID IN RANGE           { $$ = $1;
                                        Logger::logWarning("Falta sentencia FOR");
                                        IntermediateCodeGenerator::addScope("for");
                                        if(!SyntacticActions::checkRedeclaration($1)){
                                                IntermediateCodeGenerator::setVarScope($1);
                                                SyntacticActions::setIdUse($1, "variable");
                                                SyntacticActions::lastType = "short";
                                                SyntacticActions::setIdType($1);
                                        }
                                        }
                | FOR IN RANGE          { Logger::logError("Se esperaba una variable") }
                | FOR ID IN             { $$ = $2;
                                        Logger::logWarning("Falta sentencia RANGE");
                                        IntermediateCodeGenerator::addScope("for");
                                        if(!SyntacticActions::checkRedeclaration($2)){
                                                IntermediateCodeGenerator::setVarScope($2);
                                                SyntacticActions::setIdUse($2, "variable");
                                                SyntacticActions::lastType = "short";
                                                SyntacticActions::setIdType($2);
                                        }
                                        }
                | FOR ID RANGE          { $$ = $2;
                                        Logger::logError("Falta sentencia IN");
                                        IntermediateCodeGenerator::addScope("for");
                                        if(!SyntacticActions::checkRedeclaration($2)){
                                                IntermediateCodeGenerator::setVarScope($2);
                                                SyntacticActions::setIdUse($2, "variable");
                                                SyntacticActions::lastType = "short";
                                                SyntacticActions::setIdType($2);
                                        }
                                        }
                ;

argumento_bucle_for     : constante ';' constante ';' constante { if(SyntacticActions::checkForArguments($1, $3, $5)){
                                                                        IntermediateCodeGenerator::forArguments($1, $3, $5);
                                                                } else {
                                                                        IntermediateCodeGenerator::isInvalidScope = true;
                                                                        IntermediateCodeGenerator::addScope("remove");
                                                                }
                                                                }
                        | constante ';' constante ';' '-' constante     { SyntacticActions::addNegativeConstant($6);
                                                                        char *aux = (char*) malloc(sizeof($6) + 2);
                                                                        sprintf(aux, "-%s", $6);
                                                                        if(SyntacticActions::checkForArguments($1, $3, aux)){
                                                                        IntermediateCodeGenerator::forArguments($1, $3, aux);
                                                                        } else {
                                                                                IntermediateCodeGenerator::isInvalidScope = true;
                                                                                IntermediateCodeGenerator::addScope("remove");
                                                                        }
                                                                        }
                        | constante ';' constante { Logger::logError("Sentencia FOR recibe 3 parametros, 2 encontrados") }
                        | constante { Logger::logError("Sentencia FOR recibe 3 parametros, 1 encontrados") }
                        |       { Logger::logError("Sentencia FOR recibe 3 parametros, ninguno encontrado") }
                        ;

acceso_atributo : ID '.' ID     { Logger::infoMsg("Acceso a atributo");
                                        if(SyntacticActions::checkDeclaredVar($1) && SyntacticActions::checkHasMember($1, $3)) {
                                                char *aux = (char*) malloc(sizeof($1) + sizeof($3) + 2);
                                                sprintf(aux, "%s.%s", $1, $3);
                                                $$ = aux;
                                        }
                                }
                ;

// Si los tipos son diferentes, no generar tercetos
expresion       : expresion '+' termino { if (SyntacticActions::checkTypes($1, $3)) {
                                                IntermediateCodeGenerator::addTerceto("+", $1, $3);
                                                $$ = IntermediateCodeGenerator::getLastTerceto();
                                        } 
                                        }
                | expresion '-' termino { if (SyntacticActions::checkTypes($1, $3)) {
                                                IntermediateCodeGenerator::addTerceto("-", $1, $3);
                                                $$ = IntermediateCodeGenerator::getLastTerceto();
                                        }
                                        }
                | tipo '(' expresion ')' { Logger::logError("Conversion explicita no permitida") }
                | expresion '+' '(' expresion_parentesis ')' { if (SyntacticActions::checkTypes($1, $4)) {
                                                                IntermediateCodeGenerator::addTerceto("+", $1, $4); 
                                                                $$ = IntermediateCodeGenerator::getLastTerceto();
                                                                }}
                | expresion '-' '(' expresion_parentesis ')' { if (SyntacticActions::checkTypes($1, $4)) {
                                                                IntermediateCodeGenerator::addTerceto("-", $1, $4);
                                                                $$ = IntermediateCodeGenerator::getLastTerceto();
                                                                }  }
                | '(' expresion_parentesis ')' { $$ = $2; }
                | termino { $$ = $1; }
                ;

expresion_parentesis    : '(' expresion_parentesis ')' { Logger::logError("Anidamiento de expresiones con parentesis no permitida") }
                        | termino '+' termino { if (SyntacticActions::checkTypes($1, $3)) {
                                                        IntermediateCodeGenerator::addTerceto("+", $1, $3); 
                                                        $$ = IntermediateCodeGenerator::getLastTerceto();
                                                } else {
                                                        $$ = NULL;
                                                }  }
                        | termino '-' termino { if (SyntacticActions::checkTypes($1, $3)) {
                                                        IntermediateCodeGenerator::addTerceto("-", $1, $3); 
                                                        $$ = IntermediateCodeGenerator::getLastTerceto();
                                                } else {
                                                        $$ = NULL;
                                                }  }
                        | termino
                        ;

termino         : factor { $$ = $1; }
                | termino '*' factor { if (SyntacticActions::checkTypes($1, $3)) {
                                        IntermediateCodeGenerator::addTerceto("*", $1, $3);
                                        $$ = IntermediateCodeGenerator::getLastTerceto();
                }  }
                | termino '/' factor { if (SyntacticActions::checkTypes($1, $3)) {
                                        SyntacticActions::check_division_by_zero($3);
                                        IntermediateCodeGenerator::addTerceto("/", $1, $3); 
                                        $$ = IntermediateCodeGenerator::getLastTerceto();
                                        }  }
                ;

factor          : ID { if(SyntacticActions::checkDeclaredVar($1)) $$ = $1; }
                | '-' constante { if(SyntacticActions::addNegativeConstant($2)){
                                        char *aux = (char*) malloc(sizeof($2) + 2);
                                        sprintf(aux, "-%s", $2);
                                        $$ = aux;        
                                        }else{
                                                $$ = NULL;
                                        }
                                }
                | constante     { if(SyntacticActions::checkLimits($1)){
                                        $$ = $1;        
                                }else{
                                        $$ = NULL;
                                }
                                }
                ;

constante       : CTE_SHORT     { SyntacticActions::lastType = "short"; }
                | CTE_DOUBLE    { SyntacticActions::lastType = "double"; }
                | CTE_UINT      { SyntacticActions::lastType = "uint"; }
                ;

tipo    : SHORT         { SyntacticActions::lastType = "short"; }
        | UINT          { SyntacticActions::lastType = "uint"; }
        | DOUBLE        { SyntacticActions::lastType = "double"; }
        ;
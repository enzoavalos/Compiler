%{
#include "SyntacticActions.h"
#include "gramatica.tab.hpp"
#include "../IntermediateCodeGenerator/IntermediateCodeGenerator.h"
%}

%token SHORT UINT DOUBLE VOID CLASS INTERFACE IMPLEMENT IMPL
%token IF ELSE END_IF PRINT FOR IN RANGE RETURN

%union {
        int number = 0;
        char *string;
}

%token <string> LESS_EQUAL GREATER_EQUAL EQUAL NOT_EQUAL PLUS_EQUAL
%token <string> ID STRING CTE_SHORT CTE_UINT CTE_DOUBLE
%type <string> factor constante expresion asignador termino expresion_parentesis comparador condicion bloque_sentencias asignacion seleccion argumentos
%type <string> bloque_else bloque_if argumento_bucle_for encabezado_funcion sentencias_metodo sentencias_funcion_local parametro
%type <string> encabezado_for encabezado_implement herencia_composicion distributed_header funcion_declaration acceso_atributo

%left '=' PLUS_EQUAL  // Asociatividad izquierda para asignación y asignación con adición
%left '.'  // Asociatividad izquierda para acceso a atributos y métodos

%start programa

%%

programa        : '{' sentencias '}'
                | '{' sentencias        { Logger::logError("Se esperaba llave como fin del programa") }
                | sentencias '}'        { Logger::logError("Se esperaba llave como inicion del programa") }
                ;

sentencias      : sentencia
                | sentencias sentencia
                ;

sentencia       : declarativa ','
                | ejecutable ','
                ;

declarativa     : declaracion_variables
                | clase_declaration
                | objeto_declaration
                | interface_declaration
                | implement_declaration
                | distributed_method_implementation
                | funcion_declaration
                ;

ejecutable      : asignacion
                | invocacion
                | seleccion
                | print
                | bucle_for
                | retorno       { if(SyntacticActions::checkReturnScope()) IntermediateCodeGenerator::returnStatement(); }
                ;

declaracion_variables   : tipo lista_variables
                        | error lista_variables         { Logger::logError("Falta especificar el tipo de las variables") }
                        ;

lista_variables : lista_variables ';' ID        { if(!SyntacticActions::checkRedeclaration($3)){
                                                        IntermediateCodeGenerator::setVarScope($3);
                                                        SyntacticActions::setIdType($3);
                                                        SyntacticActions::setIdUse($3, "variable");
                                                        SyntacticActions::addObject($3);
                                                }
                                        }
                | ID                            { if(!SyntacticActions::checkRedeclaration($1)){
                                                        IntermediateCodeGenerator::setVarScope($1);
                                                        SyntacticActions::setIdType($1);
                                                        SyntacticActions::setIdUse($1, "variable");
                                                        SyntacticActions::addObject($1);
                                                }
                                        }
                | ID error ','    { Logger::logError("declaracion de variables invalida") }
                ;

objeto_declaration      : ID lista_variables    { if(SyntacticActions::checkDeclaredClass($1)) {
                                                        SyntacticActions::lastType = $1;
                                                        SyntacticActions::addClassToObjects($1);
                                                } else {
                                                        SyntacticActions::emptyObjects(true);
                                                }
                                                }
                        ;

encabezado_clase        : CLASS ID      {
                                        if (SyntacticActions::checkRedeclaration($2)) {
                                                IntermediateCodeGenerator::isInvalidScope = true;
                                        } else {
                                                IntermediateCodeGenerator::setVarScope($2);
                                                SyntacticActions::setIdUse($2, "nombre-clase");
                                                IntermediateCodeGenerator::addScope($2);
                                        }
}
                        ;

clase_declaration       : encabezado_clase '{' nested_class_declaration atributos metodos_clase
                                herencia_composicion '}' { //Logger::infoMsg("Declaracion de clase");
                                                                IntermediateCodeGenerator::onScopeFinished(); }
                        ;

nested_class_declaration        : encabezado_clase '{' atributos metodos_clase herencia_composicion '}' ','         { IntermediateCodeGenerator::onScopeFinished(); }
                                |
                                ;

encabezado_interfaz     : INTERFACE ID          { if (SyntacticActions::checkRedeclaration($2)) {
                                                        IntermediateCodeGenerator::isInvalidScope = true;
                                                } else {
                                                        IntermediateCodeGenerator::setVarScope($2);
                                                        SyntacticActions::setIdUse($2, "nombre-interfaz");
                                                        IntermediateCodeGenerator::addScope($2);
                                                }
                                                }
                        ;

interface_declaration   : encabezado_interfaz '{' interface_metodos '}' { //Logger::infoMsg("Declaracion de interfaz");
                                                                IntermediateCodeGenerator::onScopeFinished(); }
                        ;

interface_metodos       : interface_metodos interface_metodo_declaration
                        |
                        ;

interface_metodo_declaration    : encabezado_funcion '(' parametro ')' ',' { SyntacticActions::addParamToMethod($1, $3);
                                                                                IntermediateCodeGenerator::onScopeFinished() }
                                ;

encabezado_implement    : CLASS ID IMPLEMENT ID         { if(SyntacticActions::checkDeclaredClass($4)){
                                                                IntermediateCodeGenerator::setVarScope($2);
                                                                SyntacticActions::setIdUse($2, "nombre-clase");
                                                                IntermediateCodeGenerator::addScope($2);
                                                                SyntacticActions::addClassComposition($4);
                                                                $$ = $4;
                                                        }else{
                                                                IntermediateCodeGenerator::isInvalidScope = true;
                                                        }
                                                        }
                        ;

implement_declaration   : encabezado_implement '{' atributos metodos_clase herencia_composicion '}'
                        { //Logger::infoMsg("Implementacion de interfaz");
                                SyntacticActions::removeClassComposition($5);
                                if(!IntermediateCodeGenerator::isInvalidScope && !SyntacticActions::classImplementsInterfaceMethods($1)){
                                        IntermediateCodeGenerator::isInvalidScope = true;
                                }
                                IntermediateCodeGenerator::onScopeFinished();
                        }
                        ;

atributos               : atributos declaracion_variables ','
                        |
                        ;

metodos_clase   : metodos_clase metodo_declaration
                |
                ;

metodo_declaration      : funcion_declaration ','
                        | encabezado_funcion '(' parametro ')' ','      { //Logger::infoMsg("Prototipo de metodo");
                                                                                if(!IntermediateCodeGenerator::isInvalidScope){
                                                                                        SyntacticActions::addParamToMethod($1, $3);
                                                                                        IntermediateCodeGenerator::onScopeFinished();
                                                                                        SyntacticActions::setIdUse($1, "prototipo-metodo");
                                                                                        IntermediateCodeGenerator::setCustomScope($1, "prototype");
                                                                                        // Deletes begin of function label
                                                                                        IntermediateCodeGenerator::removeTerceto(IntermediateCodeGenerator::lastTerceto);
                                                                                }
                                                                        }
                        ;

encabezado_funcion      : VOID ID       { if(!SyntacticActions::checkRedeclaration($2)){
                                                IntermediateCodeGenerator::setVarScope($2);
                                                SyntacticActions::setIdUse($2, "nombre-funcion");
                                                IntermediateCodeGenerator::addLabelTerceto("inic_func", $2);
                                                IntermediateCodeGenerator::addScope($2);
                                                $$ = $2;
                                        }else{
                                                IntermediateCodeGenerator::isInvalidScope = true;
                                        }
                                }
                        ;

funcion_declaration     : encabezado_funcion '(' parametro ')' '{' sentencias_metodo '}' { //Logger::infoMsg("Declaracion de funcion");
                                                                                        if(!IntermediateCodeGenerator::isInvalidScope){
                                                                                                SyntacticActions::addParamToMethod($1, $3);
                                                                                                IntermediateCodeGenerator::addLabelTerceto("end_func", $1);
                                                                                                IntermediateCodeGenerator::onScopeFinished($6);
                                                                                        }
                                                                                        $$ = $1; }
                        ;

herencia_composicion    : ID ','   { SyntacticActions::addClassComposition($1); $$ = $1; }
                        |          { $$ = NULL; }
                        ;

sentencias_metodo       : sentencias_metodo declaracion_variables ','   { $$ = IntermediateCodeGenerator::getLastTerceto() }
                        | sentencias_metodo ejecutable ','              { $$ = IntermediateCodeGenerator::getLastTerceto() }
                        | sentencias_metodo local_function_declaration ','      { $$ = IntermediateCodeGenerator::getLastTerceto() }
                        |                                               { $$ = IntermediateCodeGenerator::getLastTerceto() }
                        ;

local_function_declaration      :  encabezado_funcion '(' parametro ')' '{' sentencias_funcion_local '}' { SyntacticActions::addParamToMethod($1, $3);
                                                                                                        IntermediateCodeGenerator::onScopeFinished($6);
                                                                                                        IntermediateCodeGenerator::addLabelTerceto("end_func", $1); }
                                ;

sentencias_funcion_local        : sentencias_funcion_local declaracion_variables ','    { $$ = IntermediateCodeGenerator::getLastTerceto() }
                                | sentencias_funcion_local ejecutable ','               { $$ = IntermediateCodeGenerator::getLastTerceto() }
                                | sentencias_funcion_local local_function_declaration ',' { Logger::logError("No se permite anidamiento multiple de funciones locales");
                                                                                                $$ = IntermediateCodeGenerator::getLastTerceto() }
                                |                                                       { $$ = IntermediateCodeGenerator::getLastTerceto() }
                                ;

parametro       : tipo ID       { IntermediateCodeGenerator::setVarScope($2);
                                SyntacticActions::setIdType($2);
                                SyntacticActions::setIdUse($2, "parametro");
                                $$ = $2;
                                }
                | ID                    { Logger::logError("Falta el tipo del argumento") }
                | parametro ';' tipo ID { Logger::logError("Solo se permite un parametro en declaracion de funcion") }
                | { $$ = NULL; }
                ;

distributed_header      : IMPL FOR ID   { if(SyntacticActions::checkDeclaredClass($3)){
                                                IntermediateCodeGenerator::addScope($3);
                                                $$ = $3;
                                        } else{
                                                IntermediateCodeGenerator::isInvalidScope = true;
                                        }
                                        }
                        ;

distributed_methods     : distributed_methods funcion_declaration ','   { IntermediateCodeGenerator::setCustomScope($2, "dist-implementation"); }
                        | funcion_declaration ','                       { IntermediateCodeGenerator::setCustomScope($1, "dist-implementation"); }
                        ;

distributed_method_implementation       : distributed_header ':' '{' distributed_methods '}'    { //Logger::infoMsg("Declaracion distribuida de metodos");
                                                                                                SyntacticActions::checkDistributedMethodImplementation($1);
                                                                                                IntermediateCodeGenerator::onScopeFinished(); }
                                        | distributed_header ':' '{' '}'        { Logger::logError("Implementacion distrbuida de metodos vacia"); }
                                        ;
                        
retorno                 : RETURN
                        ;

asignacion      : ID asignador expresion        { if(SyntacticActions::checkDeclaredVar($1) && SyntacticActions::checkTypes($1, $3)){
                                                        IntermediateCodeGenerator::addTerceto($2, $1, $3);
                                                } }
                | acceso_atributo asignador expresion  { SyntacticActions::checkAttributeAssignment($2, $3); }
                | ID asignador  { Logger::logError("Asignacion vacia") }
                | acceso_atributo asignador    { Logger::logError("Asignacion vacia") }
                | ID asignador '-'       { Logger::logError("Asignacion vacia") }
                ;

asignador       : '=' { 
                        char *aux = (char*) malloc(sizeof(char) * 2);
                        aux[0] = '=';
                        aux[1] = '\0';
                        $$ = aux;
                }
                | PLUS_EQUAL { 
                        char *aux = (char*) malloc(sizeof(char) * 3);
                        aux[0] = '+';
                        aux[1] = '=';
                        aux[2] = '\0';
                        $$ = aux;
                 }
                ;

invocacion      : ID '(' argumentos ')' { //Logger::infoMsg("Invocacion de funcion");
                                if(SyntacticActions::checkDeclaredMethod($1) && SyntacticActions::checkParameters($1, $3)) IntermediateCodeGenerator::addTerceto("INVOKE", $1, $3); }
                | acceso_atributo '(' argumentos ')'  { //Logger::infoMsg("Invocacion de metodo");
                                SyntacticActions::checkMethodParameters($3);
                        }
                ;

argumentos      : expresion { $$ = $1; }
                | argumentos ';' expresion      { Logger::logError("Solo se permite un argumento en invocacion de funcion");
                                                $$ = $1; }
                | { char *aux = (char*) malloc(1);
                        $$ = aux; }
                ;

encabezado_if   : IF    { IntermediateCodeGenerator::addScope("if"); }
                ;

else            : ELSE  { IntermediateCodeGenerator::addScope("else"); }
                ;

seleccion       : encabezado_if '(' condicion ')' bloque_if else bloque_else END_IF  { if(!IntermediateCodeGenerator::isInvalidScope){
                                                                                        IntermediateCodeGenerator::ifElseExpression($3, $5, $7);
                                                                                }
                                                                                IntermediateCodeGenerator::onScopeFinished();
                                                                                }
                | encabezado_if '(' condicion ')' bloque_if END_IF         { if(!IntermediateCodeGenerator::isInvalidScope){
                                                                                IntermediateCodeGenerator::ifExpression($3, $5);
                                                                        } }
                | encabezado_if '(' condicion ')' bloque_if        { Logger::logWarning("Falta sentencia END_IF");
                                                                        if(!IntermediateCodeGenerator::isInvalidScope){
                                                                                IntermediateCodeGenerator::ifExpression($3, $5);
                                                                        } }
                | encabezado_if '(' condicion ')' bloque_if else bloque_else       { Logger::logWarning("Falta sentencia END_IF");
                                                                                        if(!IntermediateCodeGenerator::isInvalidScope){
                                                                                                IntermediateCodeGenerator::ifElseExpression($3, $5, $7);
                                                                                        }
                                                                                        IntermediateCodeGenerator::onScopeFinished();
                                                                                }
                ;

bloque_if       : bloque_sentencias { IntermediateCodeGenerator::addTerceto("BI", "", "");
                                        IntermediateCodeGenerator::addStack(IntermediateCodeGenerator::lastTerceto);
                                        IntermediateCodeGenerator::addLabelTerceto();
                                        $$ = IntermediateCodeGenerator::getLastTerceto();
                                        IntermediateCodeGenerator::onScopeFinished(); }
                ;

bloque_else     : bloque_sentencias
                ;

condicion       : expresion comparador expresion        { if(SyntacticActions::checkTypes($1, $3)){
                                                                IntermediateCodeGenerator::addTerceto($2, $1, $3);
                                                                IntermediateCodeGenerator::endCondition();
                                                                $$ = IntermediateCodeGenerator::getLastTerceto();
                                                        }else{
                                                                IntermediateCodeGenerator::isInvalidScope = true;
                                                        }
                                                        }
                | expresion comparador          { Logger::logError("Se esperaba expresion en lado derecho de comparacion") }
                | comparador expresion          { Logger::logError("Se esperaba expresion en lado izquierdo de comparacion") }
                | expresion                     { Logger::logError("Se esperaba un operador de comparacion") }
                ;

comparador      : '<' { 
                        char *aux = (char*) malloc(sizeof(char) * 2);
                        aux[0] = '<';
                        aux[1] = '\0';
                        $$ = aux;
                }
                | '>' {
                        char *aux = (char*) malloc(sizeof(char) * 2);
                        aux[0] = '>';
                        aux[1] = '\0';
                        $$ = aux;
                }
                | LESS_EQUAL {
                        char *aux = (char*) malloc(sizeof(char) * 3);
                        aux[0] = '<';
                        aux[1] = '=';
                        aux[2] = '\0';
                        $$ = aux;
                }
                | GREATER_EQUAL {
                        char *aux = (char*) malloc(sizeof(char) * 3);
                        aux[0] = '>';
                        aux[1] = '=';
                        aux[2] = '\0';
                        $$ = aux;
                }
                | EQUAL {
                        char *aux = (char*) malloc(sizeof(char) * 3);
                        aux[0] = '=';
                        aux[1] = '=';
                        aux[2] = '\0';
                        $$ = aux;
                }
                | NOT_EQUAL {
                        char *aux = (char*) malloc(sizeof(char) * 3);
                        aux[0] = '!';
                        aux[1] = '!';
                        aux[2] = '\0';
                        $$ = aux;
                }
                ;
        
bloque_sentencias       : sentencia { $$ = IntermediateCodeGenerator::getLastTerceto(); }
                        | '{' sentencias '}' { $$ = IntermediateCodeGenerator::getLastTerceto(); }
                        ;

print   : PRINT STRING  { IntermediateCodeGenerator::addTerceto("PRINT", $2, ""); }
        | PRINT         { Logger::logError("Se esperaba cadena para imprimir") }
        | STRING        { Logger::logError("Falta sentencia PRINT") }
        ;

bucle_for       : encabezado_for '(' argumento_bucle_for ')' bloque_sentencias { if(!IntermediateCodeGenerator::isInvalidScope){
                                                                                        IntermediateCodeGenerator::forBlock($1, $5);
                                                                                }
                                                                                IntermediateCodeGenerator::onScopeFinished();
                                                                                }
                | encabezado_for '(' argumento_bucle_for bloque_sentencias    { Logger::logWarning("Falta parentesis en los argumentos del bloque for");
                                                                                if(!IntermediateCodeGenerator::isInvalidScope){
                                                                                        IntermediateCodeGenerator::forBlock($1, $4);
                                                                                }
                                                                                IntermediateCodeGenerator::onScopeFinished();
                                                                                }
                | encabezado_for argumento_bucle_for ')' bloque_sentencias    { Logger::logWarning("Falta parentesis en los argumentos del bloque for");
                                                                                if(!IntermediateCodeGenerator::isInvalidScope){
                                                                                        IntermediateCodeGenerator::forBlock($1, $4);
                                                                                }
                                                                                IntermediateCodeGenerator::onScopeFinished();
                                                                                }
                ;

encabezado_for  : FOR ID IN RANGE       { $$ = $2;
                                        IntermediateCodeGenerator::addScope("for");
                                        if(!SyntacticActions::checkRedeclaration($2)){
                                                IntermediateCodeGenerator::setVarScope($2);
                                                SyntacticActions::setIdUse($2, "variable");
                                                SyntacticActions::lastType = "short";
                                                SyntacticActions::setIdType($2); }
                                        }
                | ID IN RANGE           { $$ = $1;
                                        Logger::logWarning("Falta sentencia FOR");
                                        IntermediateCodeGenerator::addScope("for");
                                        if(!SyntacticActions::checkRedeclaration($1)){
                                                IntermediateCodeGenerator::setVarScope($1);
                                                SyntacticActions::setIdUse($1, "variable");
                                                SyntacticActions::lastType = "short";
                                                SyntacticActions::setIdType($1);
                                        }
                                        }
                | FOR IN RANGE          { Logger::logError("Se esperaba una variable") }
                | FOR ID IN             { $$ = $2;
                                        Logger::logWarning("Falta sentencia RANGE");
                                        IntermediateCodeGenerator::addScope("for");
                                        if(!SyntacticActions::checkRedeclaration($2)){
                                                IntermediateCodeGenerator::setVarScope($2);
                                                SyntacticActions::setIdUse($2, "variable");
                                                SyntacticActions::lastType = "short";
                                                SyntacticActions::setIdType($2);
                                        }
                                        }
                | FOR ID RANGE          { $$ = $2;
                                        Logger::logError("Falta sentencia IN");
                                        IntermediateCodeGenerator::addScope("for");
                                        if(!SyntacticActions::checkRedeclaration($2)){
                                                IntermediateCodeGenerator::setVarScope($2);
                                                SyntacticActions::setIdUse($2, "variable");
                                                SyntacticActions::lastType = "short";
                                                SyntacticActions::setIdType($2);
                                        }
                                        }
                ;

argumento_bucle_for     : constante ';' constante ';' constante { if(SyntacticActions::checkForArguments($1, $3, $5)){
                                                                        IntermediateCodeGenerator::forArguments($1, $3, $5);
                                                                } else {
                                                                        IntermediateCodeGenerator::isInvalidScope = true;
                                                                }
                                                                }
                        | constante ';' constante ';' '-' constante     { SyntacticActions::addNegativeConstant($6);
                                                                        char *aux = (char*) malloc(sizeof($6) + 2);
                                                                        sprintf(aux, "-%s", $6);
                                                                        if(SyntacticActions::checkForArguments($1, $3, aux)){
                                                                        IntermediateCodeGenerator::forArguments($1, $3, aux);
                                                                        } else {
                                                                                IntermediateCodeGenerator::isInvalidScope = true;
                                                                        }
                                                                        }
                        | constante ';' constante { Logger::logError("Sentencia FOR recibe 3 parametros, 2 encontrados") }
                        | constante { Logger::logError("Sentencia FOR recibe 3 parametros, 1 encontrados") }
                        |       { Logger::logError("Sentencia FOR recibe 3 parametros, ninguno encontrado") }
                        ;

expresion       : expresion '+' termino { if (SyntacticActions::checkTypes($1, $3)) {
                                                IntermediateCodeGenerator::addTerceto("+", $1, $3);
                                                $$ = IntermediateCodeGenerator::getLastTerceto();
                                        } 
                                        }
                | expresion '-' termino { if (SyntacticActions::checkTypes($1, $3)) {
                                                IntermediateCodeGenerator::addTerceto("-", $1, $3);
                                                $$ = IntermediateCodeGenerator::getLastTerceto();
                                        }
                                        }
                | tipo '(' expresion ')' { Logger::logError("Conversion explicita no permitida") }
                | expresion '+' '(' expresion_parentesis ')' { if (SyntacticActions::checkTypes($1, $4)) {
                                                                IntermediateCodeGenerator::addTerceto("+", $1, $4); 
                                                                $$ = IntermediateCodeGenerator::getLastTerceto();
                                                                }}
                | expresion '-' '(' expresion_parentesis ')' { if (SyntacticActions::checkTypes($1, $4)) {
                                                                IntermediateCodeGenerator::addTerceto("-", $1, $4);
                                                                $$ = IntermediateCodeGenerator::getLastTerceto();
                                                                }  }
                | '(' expresion_parentesis ')' { $$ = $2; }
                | termino { $$ = $1; }
                ;

expresion_parentesis    : '(' expresion_parentesis ')' { Logger::logError("Anidamiento de expresiones con parentesis no permitida") }
                        | termino '+' termino { if (SyntacticActions::checkTypes($1, $3)) {
                                                        IntermediateCodeGenerator::addTerceto("+", $1, $3); 
                                                        $$ = IntermediateCodeGenerator::getLastTerceto();
                                                } else {
                                                        $$ = NULL;
                                                }  }
                        | termino '-' termino { if (SyntacticActions::checkTypes($1, $3)) {
                                                        IntermediateCodeGenerator::addTerceto("-", $1, $3); 
                                                        $$ = IntermediateCodeGenerator::getLastTerceto();
                                                } else {
                                                        $$ = NULL;
                                                }  }
                        | termino
                        ;

termino         : factor { $$ = $1; }
                | termino '*' factor { if (SyntacticActions::checkTypes($1, $3)) {
                                                IntermediateCodeGenerator::addTerceto("*", $1, $3);
                                                $$ = IntermediateCodeGenerator::getLastTerceto();
                                        }  }
                | termino '/' factor { if (SyntacticActions::checkTypes($1, $3)) {
                                                SyntacticActions::check_division_by_zero($3);
                                                IntermediateCodeGenerator::addTerceto("/", $1, $3); 
                                                $$ = IntermediateCodeGenerator::getLastTerceto();
                                        }  }
                ;

acceso_atributo : ID '.' ID     { if(SyntacticActions::checkDeclaredVar($1)) {
                                                $$ = SyntacticActions::checkHasMember($3, $1, "");
                                        }
                                }
                ;

factor          : ID { if(SyntacticActions::checkDeclaredVar($1)) $$ = $1; }
                | '-' constante { if(SyntacticActions::addNegativeConstant($2)){
                                        char *aux = (char*) malloc(sizeof($2) + 2);
                                        sprintf(aux, "-%s", $2);
                                        $$ = aux;        
                                        }else{
                                                $$ = NULL;
                                        }
                                }
                | constante     { if(SyntacticActions::checkLimits($1)){
                                        $$ = $1;
                                }else{
                                        $$ = NULL;
                                }
                                }
                | acceso_atributo { $$ = $1; }
                ;

constante       : CTE_SHORT     { $$ = $1; SyntacticActions::lastType = "short"; }
                | CTE_DOUBLE    { $$ = $1; SyntacticActions::lastType = "double"; }
                | CTE_UINT      { $$ = $1; SyntacticActions::lastType = "uint"; }
                ;

tipo    : SHORT         { SyntacticActions::lastType = "short"; }
        | UINT          { SyntacticActions::lastType = "uint"; }
        | DOUBLE        { SyntacticActions::lastType = "double"; }
        ;
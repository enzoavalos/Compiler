Terminals unused in grammar

   UMINUS


Gramática

    0 $accept: programa $end

    1 programa: '{' sentencias '}'

    2 sentencias: sentencia
    3           | sentencias sentencia

    4 sentencia: declarativa ','
    5          | ejecutable ','

    6 declarativa: declaracion_variables
    7            | clase_declaration
    8            | objeto_declaration
    9            | interface_declaration
   10            | implement_declaration
   11            | distributed_method_implementation
   12            | funcion_declaration

   13 ejecutable: asignacion
   14           | invocacion
   15           | seleccion
   16           | print
   17           | bucle_for
   18           | acceso_atributo

   19 declaracion_variables: tipo lista_variables

   20 lista_variables: lista_variables ';' ID
   21                | ID

   22 clase_declaration: CLASS ID '{' atributos metodos_clase herencia_composicion '}'

   23 interface_declaration: INTERFACE ID '{' interface_metodos '}'

   24 interface_metodos: interface_metodos interface_metodo_declaration
   25                  | /* vacío */

   26 interface_metodo_declaration: VOID ID '(' parametro ')' ','

   27 implement_declaration: CLASS ID IMPLEMENT ID '{' metodos_clase herencia_composicion '}'

   28 atributos: atributos atributo_declaration
   29          | /* vacío */

   30 atributo_declaration: declaracion_variables ','

   31 metodos_clase: metodos_clase metodo_declaration
   32              | /* vacío */

   33 metodo_declaration: VOID ID '(' parametro ')' '{' sentencias_metodo '}' ','

   34 funcion_declaration: VOID ID '(' parametro ')' '{' sentencias_metodo '}'
   35                    | /* vacío */

   36 herencia_composicion: herencia_composicion ID ','
   37                     | /* vacío */

   38 sentencias_metodo: sentencias_metodo declaracion_variables ','
   39                  | sentencias_metodo retorno ','
   40                  | sentencias_metodo ejecutable ','
   41                  | sentencias_metodo funcion_declaration ','
   42                  | /* vacío */

   43 parametro: tipo ID
   44          | /* vacío */

   45 distributed_method_implementation: IMPL FOR ID ':' '{' metodos_clase '}'

   46 retorno: RETURN

   47 objeto_declaration: ID lista_objetos

   48 lista_objetos: lista_objetos ';' objeto
   49              | objeto

   50 objeto: ID

   51 asignacion: ID asignador expresion
   52           | ID '.' ID asignador expresion

   53 asignador: '='
   54          | PLUS_EQUAL

   55 invocacion: ID '(' argumentos ')'
   56           | ID '.' ID '(' argumentos ')'

   57 argumentos: expresion
   58           | /* vacío */

   59 seleccion: IF '(' condicion ')' bloque_sentencias ELSE bloque_sentencias END_IF
   60          | IF '(' condicion ')' bloque_sentencias END_IF

   61 condicion: expresion comparador expresion

   62 comparador: '<'
   63           | '>'
   64           | LESS_EQUAL
   65           | GREATER_EQUAL
   66           | EQUAL
   67           | NOT_EQUAL

   68 bloque_sentencias: sentencia
   69                  | '{' sentencias '}'

   70 print: PRINT STRING

   71 bucle_for: FOR ID IN RANGE '(' constante ';' constante ';' constante ')' bloque_sentencias

   72 acceso_atributo: ID '.' ID

   73 expresion: expresion '+' termino
   74          | expresion '-' termino
   75          | termino
   76          | tipo '(' expresion ')'
   77          | '(' expresion_parentesis ')'

   78 expresion_parentesis: termino '+' termino
   79                     | termino '-' termino
   80                     | termino
   81                     | '(' expresion_parentesis ')'

   82 termino: factor
   83        | termino '*' factor
   84        | termino '/' factor

   85 factor: ID
   86       | '-' constante
   87       | constante

   88 constante: CTE_SHORT
   89          | CTE_DOUBLE
   90          | CTE_UINT

   91 tipo: SHORT
   92     | UINT
   93     | DOUBLE


Terminales con las reglas donde aparecen

$end (0) 0
'(' (40) 26 33 34 55 56 59 60 71 76 77 81
')' (41) 26 33 34 55 56 59 60 71 76 77 81
'*' (42) 83
'+' (43) 73 78
',' (44) 4 5 26 30 33 36 38 39 40 41
'-' (45) 74 79 86
'.' (46) 52 56 72
'/' (47) 84
':' (58) 45
';' (59) 20 48 71
'<' (60) 62
'=' (61) 53
'>' (62) 63
'{' (123) 1 22 23 27 33 34 45 69
'}' (125) 1 22 23 27 33 34 45 69
error (256)
SHORT (258) 91
UINT (259) 92
DOUBLE (260) 93
VOID (261) 26 33 34
CLASS (262) 22 27
INTERFACE (263) 23
IMPLEMENT (264) 27
IMPL (265) 45
IF (266) 59 60
ELSE (267) 59
END_IF (268) 59 60
PRINT (269) 70
FOR (270) 45 71
IN (271) 71
RANGE (272) 71
RETURN (273) 46
LESS_EQUAL (274) 64
GREATER_EQUAL (275) 65
EQUAL (276) 66
NOT_EQUAL (277) 67
PLUS_EQUAL (278) 54
UMINUS (279)
ID (280) 20 21 22 23 26 27 33 34 36 43 45 47 50 51 52 55 56 71 72 85
STRING (281) 70
CTE_SHORT (282) 88
CTE_UINT (283) 90
CTE_DOUBLE (284) 89


No terminales con las reglas donde aparecen

$accept (45)
    en la izquierda: 0
programa (46)
    en la izquierda: 1, en la derecha: 0
sentencias (47)
    en la izquierda: 2 3, en la derecha: 1 3 69
sentencia (48)
    en la izquierda: 4 5, en la derecha: 2 3 68
declarativa (49)
    en la izquierda: 6 7 8 9 10 11 12, en la derecha: 4
ejecutable (50)
    en la izquierda: 13 14 15 16 17 18, en la derecha: 5 40
declaracion_variables (51)
    en la izquierda: 19, en la derecha: 6 30 38
lista_variables (52)
    en la izquierda: 20 21, en la derecha: 19 20
clase_declaration (53)
    en la izquierda: 22, en la derecha: 7
interface_declaration (54)
    en la izquierda: 23, en la derecha: 9
interface_metodos (55)
    en la izquierda: 24 25, en la derecha: 23 24
interface_metodo_declaration (56)
    en la izquierda: 26, en la derecha: 24
implement_declaration (57)
    en la izquierda: 27, en la derecha: 10
atributos (58)
    en la izquierda: 28 29, en la derecha: 22 28
atributo_declaration (59)
    en la izquierda: 30, en la derecha: 28
metodos_clase (60)
    en la izquierda: 31 32, en la derecha: 22 27 31 45
metodo_declaration (61)
    en la izquierda: 33, en la derecha: 31
funcion_declaration (62)
    en la izquierda: 34 35, en la derecha: 12 41
herencia_composicion (63)
    en la izquierda: 36 37, en la derecha: 22 27 36
sentencias_metodo (64)
    en la izquierda: 38 39 40 41 42, en la derecha: 33 34 38 39 40
    41
parametro (65)
    en la izquierda: 43 44, en la derecha: 26 33 34
distributed_method_implementation (66)
    en la izquierda: 45, en la derecha: 11
retorno (67)
    en la izquierda: 46, en la derecha: 39
objeto_declaration (68)
    en la izquierda: 47, en la derecha: 8
lista_objetos (69)
    en la izquierda: 48 49, en la derecha: 47 48
objeto (70)
    en la izquierda: 50, en la derecha: 48 49
asignacion (71)
    en la izquierda: 51 52, en la derecha: 13
asignador (72)
    en la izquierda: 53 54, en la derecha: 51 52
invocacion (73)
    en la izquierda: 55 56, en la derecha: 14
argumentos (74)
    en la izquierda: 57 58, en la derecha: 55 56
seleccion (75)
    en la izquierda: 59 60, en la derecha: 15
condicion (76)
    en la izquierda: 61, en la derecha: 59 60
comparador (77)
    en la izquierda: 62 63 64 65 66 67, en la derecha: 61
bloque_sentencias (78)
    en la izquierda: 68 69, en la derecha: 59 60 71
print (79)
    en la izquierda: 70, en la derecha: 16
bucle_for (80)
    en la izquierda: 71, en la derecha: 17
acceso_atributo (81)
    en la izquierda: 72, en la derecha: 18
expresion (82)
    en la izquierda: 73 74 75 76 77, en la derecha: 51 52 57 61 73
    74 76
expresion_parentesis (83)
    en la izquierda: 78 79 80 81, en la derecha: 77 81
termino (84)
    en la izquierda: 82 83 84, en la derecha: 73 74 75 78 79 80 83
    84
factor (85)
    en la izquierda: 85 86 87, en la derecha: 82 83 84
constante (86)
    en la izquierda: 88 89 90, en la derecha: 71 86 87
tipo (87)
    en la izquierda: 91 92 93, en la derecha: 19 43 76


estado 0

    0 $accept: . programa $end

    '{'  desplazar e ir al estado 1

    programa  ir al estado 2


estado 1

    1 programa: '{' . sentencias '}'

    SHORT      desplazar e ir al estado 3
    UINT       desplazar e ir al estado 4
    DOUBLE     desplazar e ir al estado 5
    VOID       desplazar e ir al estado 6
    CLASS      desplazar e ir al estado 7
    INTERFACE  desplazar e ir al estado 8
    IMPL       desplazar e ir al estado 9
    IF         desplazar e ir al estado 10
    PRINT      desplazar e ir al estado 11
    FOR        desplazar e ir al estado 12
    ID         desplazar e ir al estado 13

    $default  reduce usando la regla 35 (funcion_declaration)

    sentencias                         ir al estado 14
    sentencia                          ir al estado 15
    declarativa                        ir al estado 16
    ejecutable                         ir al estado 17
    declaracion_variables              ir al estado 18
    clase_declaration                  ir al estado 19
    interface_declaration              ir al estado 20
    implement_declaration              ir al estado 21
    funcion_declaration                ir al estado 22
    distributed_method_implementation  ir al estado 23
    objeto_declaration                 ir al estado 24
    asignacion                         ir al estado 25
    invocacion                         ir al estado 26
    seleccion                          ir al estado 27
    print                              ir al estado 28
    bucle_for                          ir al estado 29
    acceso_atributo                    ir al estado 30
    tipo                               ir al estado 31


estado 2

    0 $accept: programa . $end

    $end  desplazar e ir al estado 32


estado 3

   91 tipo: SHORT .

    $default  reduce usando la regla 91 (tipo)


estado 4

   92 tipo: UINT .

    $default  reduce usando la regla 92 (tipo)


estado 5

   93 tipo: DOUBLE .

    $default  reduce usando la regla 93 (tipo)


estado 6

   34 funcion_declaration: VOID . ID '(' parametro ')' '{' sentencias_metodo '}'

    ID  desplazar e ir al estado 33


estado 7

   22 clase_declaration: CLASS . ID '{' atributos metodos_clase herencia_composicion '}'
   27 implement_declaration: CLASS . ID IMPLEMENT ID '{' metodos_clase herencia_composicion '}'

    ID  desplazar e ir al estado 34


estado 8

   23 interface_declaration: INTERFACE . ID '{' interface_metodos '}'

    ID  desplazar e ir al estado 35


estado 9

   45 distributed_method_implementation: IMPL . FOR ID ':' '{' metodos_clase '}'

    FOR  desplazar e ir al estado 36


estado 10

   59 seleccion: IF . '(' condicion ')' bloque_sentencias ELSE bloque_sentencias END_IF
   60          | IF . '(' condicion ')' bloque_sentencias END_IF

    '('  desplazar e ir al estado 37


estado 11

   70 print: PRINT . STRING

    STRING  desplazar e ir al estado 38


estado 12

   71 bucle_for: FOR . ID IN RANGE '(' constante ';' constante ';' constante ')' bloque_sentencias

    ID  desplazar e ir al estado 39


estado 13

   47 objeto_declaration: ID . lista_objetos
   51 asignacion: ID . asignador expresion
   52           | ID . '.' ID asignador expresion
   55 invocacion: ID . '(' argumentos ')'
   56           | ID . '.' ID '(' argumentos ')'
   72 acceso_atributo: ID . '.' ID

    PLUS_EQUAL  desplazar e ir al estado 40
    '='         desplazar e ir al estado 41
    '.'         desplazar e ir al estado 42
    ID          desplazar e ir al estado 43
    '('         desplazar e ir al estado 44

    lista_objetos  ir al estado 45
    objeto         ir al estado 46
    asignador      ir al estado 47


estado 14

    1 programa: '{' sentencias . '}'
    3 sentencias: sentencias . sentencia

    SHORT      desplazar e ir al estado 3
    UINT       desplazar e ir al estado 4
    DOUBLE     desplazar e ir al estado 5
    VOID       desplazar e ir al estado 6
    CLASS      desplazar e ir al estado 7
    INTERFACE  desplazar e ir al estado 8
    IMPL       desplazar e ir al estado 9
    IF         desplazar e ir al estado 10
    PRINT      desplazar e ir al estado 11
    FOR        desplazar e ir al estado 12
    ID         desplazar e ir al estado 13
    '}'        desplazar e ir al estado 48

    $default  reduce usando la regla 35 (funcion_declaration)

    sentencia                          ir al estado 49
    declarativa                        ir al estado 16
    ejecutable                         ir al estado 17
    declaracion_variables              ir al estado 18
    clase_declaration                  ir al estado 19
    interface_declaration              ir al estado 20
    implement_declaration              ir al estado 21
    funcion_declaration                ir al estado 22
    distributed_method_implementation  ir al estado 23
    objeto_declaration                 ir al estado 24
    asignacion                         ir al estado 25
    invocacion                         ir al estado 26
    seleccion                          ir al estado 27
    print                              ir al estado 28
    bucle_for                          ir al estado 29
    acceso_atributo                    ir al estado 30
    tipo                               ir al estado 31


estado 15

    2 sentencias: sentencia .

    $default  reduce usando la regla 2 (sentencias)


estado 16

    4 sentencia: declarativa . ','

    ','  desplazar e ir al estado 50


estado 17

    5 sentencia: ejecutable . ','

    ','  desplazar e ir al estado 51


estado 18

    6 declarativa: declaracion_variables .

    $default  reduce usando la regla 6 (declarativa)


estado 19

    7 declarativa: clase_declaration .

    $default  reduce usando la regla 7 (declarativa)


estado 20

    9 declarativa: interface_declaration .

    $default  reduce usando la regla 9 (declarativa)


estado 21

   10 declarativa: implement_declaration .

    $default  reduce usando la regla 10 (declarativa)


estado 22

   12 declarativa: funcion_declaration .

    $default  reduce usando la regla 12 (declarativa)


estado 23

   11 declarativa: distributed_method_implementation .

    $default  reduce usando la regla 11 (declarativa)


estado 24

    8 declarativa: objeto_declaration .

    $default  reduce usando la regla 8 (declarativa)


estado 25

   13 ejecutable: asignacion .

    $default  reduce usando la regla 13 (ejecutable)


estado 26

   14 ejecutable: invocacion .

    $default  reduce usando la regla 14 (ejecutable)


estado 27

   15 ejecutable: seleccion .

    $default  reduce usando la regla 15 (ejecutable)


estado 28

   16 ejecutable: print .

    $default  reduce usando la regla 16 (ejecutable)


estado 29

   17 ejecutable: bucle_for .

    $default  reduce usando la regla 17 (ejecutable)


estado 30

   18 ejecutable: acceso_atributo .

    $default  reduce usando la regla 18 (ejecutable)


estado 31

   19 declaracion_variables: tipo . lista_variables

    ID  desplazar e ir al estado 52

    lista_variables  ir al estado 53


estado 32

    0 $accept: programa $end .

    $default  aceptar


estado 33

   34 funcion_declaration: VOID ID . '(' parametro ')' '{' sentencias_metodo '}'

    '('  desplazar e ir al estado 54


estado 34

   22 clase_declaration: CLASS ID . '{' atributos metodos_clase herencia_composicion '}'
   27 implement_declaration: CLASS ID . IMPLEMENT ID '{' metodos_clase herencia_composicion '}'

    IMPLEMENT  desplazar e ir al estado 55
    '{'        desplazar e ir al estado 56


estado 35

   23 interface_declaration: INTERFACE ID . '{' interface_metodos '}'

    '{'  desplazar e ir al estado 57


estado 36

   45 distributed_method_implementation: IMPL FOR . ID ':' '{' metodos_clase '}'

    ID  desplazar e ir al estado 58


estado 37

   59 seleccion: IF '(' . condicion ')' bloque_sentencias ELSE bloque_sentencias END_IF
   60          | IF '(' . condicion ')' bloque_sentencias END_IF

    SHORT       desplazar e ir al estado 3
    UINT        desplazar e ir al estado 4
    DOUBLE      desplazar e ir al estado 5
    ID          desplazar e ir al estado 59
    CTE_SHORT   desplazar e ir al estado 60
    CTE_UINT    desplazar e ir al estado 61
    CTE_DOUBLE  desplazar e ir al estado 62
    '('         desplazar e ir al estado 63
    '-'         desplazar e ir al estado 64

    condicion  ir al estado 65
    expresion  ir al estado 66
    termino    ir al estado 67
    factor     ir al estado 68
    constante  ir al estado 69
    tipo       ir al estado 70


estado 38

   70 print: PRINT STRING .

    $default  reduce usando la regla 70 (print)


estado 39

   71 bucle_for: FOR ID . IN RANGE '(' constante ';' constante ';' constante ')' bloque_sentencias

    IN  desplazar e ir al estado 71


estado 40

   54 asignador: PLUS_EQUAL .

    $default  reduce usando la regla 54 (asignador)


estado 41

   53 asignador: '=' .

    $default  reduce usando la regla 53 (asignador)


estado 42

   52 asignacion: ID '.' . ID asignador expresion
   56 invocacion: ID '.' . ID '(' argumentos ')'
   72 acceso_atributo: ID '.' . ID

    ID  desplazar e ir al estado 72


estado 43

   50 objeto: ID .

    $default  reduce usando la regla 50 (objeto)


estado 44

   55 invocacion: ID '(' . argumentos ')'

    SHORT       desplazar e ir al estado 3
    UINT        desplazar e ir al estado 4
    DOUBLE      desplazar e ir al estado 5
    ID          desplazar e ir al estado 59
    CTE_SHORT   desplazar e ir al estado 60
    CTE_UINT    desplazar e ir al estado 61
    CTE_DOUBLE  desplazar e ir al estado 62
    '('         desplazar e ir al estado 63
    '-'         desplazar e ir al estado 64

    $default  reduce usando la regla 58 (argumentos)

    argumentos  ir al estado 73
    expresion   ir al estado 74
    termino     ir al estado 67
    factor      ir al estado 68
    constante   ir al estado 69
    tipo        ir al estado 70


estado 45

   47 objeto_declaration: ID lista_objetos .
   48 lista_objetos: lista_objetos . ';' objeto

    ';'  desplazar e ir al estado 75

    $default  reduce usando la regla 47 (objeto_declaration)


estado 46

   49 lista_objetos: objeto .

    $default  reduce usando la regla 49 (lista_objetos)


estado 47

   51 asignacion: ID asignador . expresion

    SHORT       desplazar e ir al estado 3
    UINT        desplazar e ir al estado 4
    DOUBLE      desplazar e ir al estado 5
    ID          desplazar e ir al estado 59
    CTE_SHORT   desplazar e ir al estado 60
    CTE_UINT    desplazar e ir al estado 61
    CTE_DOUBLE  desplazar e ir al estado 62
    '('         desplazar e ir al estado 63
    '-'         desplazar e ir al estado 64

    expresion  ir al estado 76
    termino    ir al estado 67
    factor     ir al estado 68
    constante  ir al estado 69
    tipo       ir al estado 70


estado 48

    1 programa: '{' sentencias '}' .

    $default  reduce usando la regla 1 (programa)


estado 49

    3 sentencias: sentencias sentencia .

    $default  reduce usando la regla 3 (sentencias)


estado 50

    4 sentencia: declarativa ',' .

    $default  reduce usando la regla 4 (sentencia)


estado 51

    5 sentencia: ejecutable ',' .

    $default  reduce usando la regla 5 (sentencia)


estado 52

   21 lista_variables: ID .

    $default  reduce usando la regla 21 (lista_variables)


estado 53

   19 declaracion_variables: tipo lista_variables .
   20 lista_variables: lista_variables . ';' ID

    ';'  desplazar e ir al estado 77

    $default  reduce usando la regla 19 (declaracion_variables)


estado 54

   34 funcion_declaration: VOID ID '(' . parametro ')' '{' sentencias_metodo '}'

    SHORT   desplazar e ir al estado 3
    UINT    desplazar e ir al estado 4
    DOUBLE  desplazar e ir al estado 5

    $default  reduce usando la regla 44 (parametro)

    parametro  ir al estado 78
    tipo       ir al estado 79


estado 55

   27 implement_declaration: CLASS ID IMPLEMENT . ID '{' metodos_clase herencia_composicion '}'

    ID  desplazar e ir al estado 80


estado 56

   22 clase_declaration: CLASS ID '{' . atributos metodos_clase herencia_composicion '}'

    $default  reduce usando la regla 29 (atributos)

    atributos  ir al estado 81


estado 57

   23 interface_declaration: INTERFACE ID '{' . interface_metodos '}'

    $default  reduce usando la regla 25 (interface_metodos)

    interface_metodos  ir al estado 82


estado 58

   45 distributed_method_implementation: IMPL FOR ID . ':' '{' metodos_clase '}'

    ':'  desplazar e ir al estado 83


estado 59

   85 factor: ID .

    $default  reduce usando la regla 85 (factor)


estado 60

   88 constante: CTE_SHORT .

    $default  reduce usando la regla 88 (constante)


estado 61

   90 constante: CTE_UINT .

    $default  reduce usando la regla 90 (constante)


estado 62

   89 constante: CTE_DOUBLE .

    $default  reduce usando la regla 89 (constante)


estado 63

   77 expresion: '(' . expresion_parentesis ')'

    ID          desplazar e ir al estado 59
    CTE_SHORT   desplazar e ir al estado 60
    CTE_UINT    desplazar e ir al estado 61
    CTE_DOUBLE  desplazar e ir al estado 62
    '('         desplazar e ir al estado 84
    '-'         desplazar e ir al estado 64

    expresion_parentesis  ir al estado 85
    termino               ir al estado 86
    factor                ir al estado 68
    constante             ir al estado 69


estado 64

   86 factor: '-' . constante

    CTE_SHORT   desplazar e ir al estado 60
    CTE_UINT    desplazar e ir al estado 61
    CTE_DOUBLE  desplazar e ir al estado 62

    constante  ir al estado 87


estado 65

   59 seleccion: IF '(' condicion . ')' bloque_sentencias ELSE bloque_sentencias END_IF
   60          | IF '(' condicion . ')' bloque_sentencias END_IF

    ')'  desplazar e ir al estado 88


estado 66

   61 condicion: expresion . comparador expresion
   73 expresion: expresion . '+' termino
   74          | expresion . '-' termino

    LESS_EQUAL     desplazar e ir al estado 89
    GREATER_EQUAL  desplazar e ir al estado 90
    EQUAL          desplazar e ir al estado 91
    NOT_EQUAL      desplazar e ir al estado 92
    '<'            desplazar e ir al estado 93
    '>'            desplazar e ir al estado 94
    '+'            desplazar e ir al estado 95
    '-'            desplazar e ir al estado 96

    comparador  ir al estado 97


estado 67

   75 expresion: termino .
   83 termino: termino . '*' factor
   84        | termino . '/' factor

    '*'  desplazar e ir al estado 98
    '/'  desplazar e ir al estado 99

    $default  reduce usando la regla 75 (expresion)


estado 68

   82 termino: factor .

    $default  reduce usando la regla 82 (termino)


estado 69

   87 factor: constante .

    $default  reduce usando la regla 87 (factor)


estado 70

   76 expresion: tipo . '(' expresion ')'

    '('  desplazar e ir al estado 100


estado 71

   71 bucle_for: FOR ID IN . RANGE '(' constante ';' constante ';' constante ')' bloque_sentencias

    RANGE  desplazar e ir al estado 101


estado 72

   52 asignacion: ID '.' ID . asignador expresion
   56 invocacion: ID '.' ID . '(' argumentos ')'
   72 acceso_atributo: ID '.' ID .

    PLUS_EQUAL  desplazar e ir al estado 40
    '='         desplazar e ir al estado 41
    '('         desplazar e ir al estado 102

    $default  reduce usando la regla 72 (acceso_atributo)

    asignador  ir al estado 103


estado 73

   55 invocacion: ID '(' argumentos . ')'

    ')'  desplazar e ir al estado 104


estado 74

   57 argumentos: expresion .
   73 expresion: expresion . '+' termino
   74          | expresion . '-' termino

    '+'  desplazar e ir al estado 95
    '-'  desplazar e ir al estado 96

    $default  reduce usando la regla 57 (argumentos)


estado 75

   48 lista_objetos: lista_objetos ';' . objeto

    ID  desplazar e ir al estado 43

    objeto  ir al estado 105


estado 76

   51 asignacion: ID asignador expresion .
   73 expresion: expresion . '+' termino
   74          | expresion . '-' termino

    '+'  desplazar e ir al estado 95
    '-'  desplazar e ir al estado 96

    $default  reduce usando la regla 51 (asignacion)


estado 77

   20 lista_variables: lista_variables ';' . ID

    ID  desplazar e ir al estado 106


estado 78

   34 funcion_declaration: VOID ID '(' parametro . ')' '{' sentencias_metodo '}'

    ')'  desplazar e ir al estado 107


estado 79

   43 parametro: tipo . ID

    ID  desplazar e ir al estado 108


estado 80

   27 implement_declaration: CLASS ID IMPLEMENT ID . '{' metodos_clase herencia_composicion '}'

    '{'  desplazar e ir al estado 109


estado 81

   22 clase_declaration: CLASS ID '{' atributos . metodos_clase herencia_composicion '}'
   28 atributos: atributos . atributo_declaration

    SHORT   desplazar e ir al estado 3
    UINT    desplazar e ir al estado 4
    DOUBLE  desplazar e ir al estado 5

    $default  reduce usando la regla 32 (metodos_clase)

    declaracion_variables  ir al estado 110
    atributo_declaration   ir al estado 111
    metodos_clase          ir al estado 112
    tipo                   ir al estado 31


estado 82

   23 interface_declaration: INTERFACE ID '{' interface_metodos . '}'
   24 interface_metodos: interface_metodos . interface_metodo_declaration

    VOID  desplazar e ir al estado 113
    '}'   desplazar e ir al estado 114

    interface_metodo_declaration  ir al estado 115


estado 83

   45 distributed_method_implementation: IMPL FOR ID ':' . '{' metodos_clase '}'

    '{'  desplazar e ir al estado 116


estado 84

   81 expresion_parentesis: '(' . expresion_parentesis ')'

    ID          desplazar e ir al estado 59
    CTE_SHORT   desplazar e ir al estado 60
    CTE_UINT    desplazar e ir al estado 61
    CTE_DOUBLE  desplazar e ir al estado 62
    '('         desplazar e ir al estado 84
    '-'         desplazar e ir al estado 64

    expresion_parentesis  ir al estado 117
    termino               ir al estado 86
    factor                ir al estado 68
    constante             ir al estado 69


estado 85

   77 expresion: '(' expresion_parentesis . ')'

    ')'  desplazar e ir al estado 118


estado 86

   78 expresion_parentesis: termino . '+' termino
   79                     | termino . '-' termino
   80                     | termino .
   83 termino: termino . '*' factor
   84        | termino . '/' factor

    '+'  desplazar e ir al estado 119
    '-'  desplazar e ir al estado 120
    '*'  desplazar e ir al estado 98
    '/'  desplazar e ir al estado 99

    $default  reduce usando la regla 80 (expresion_parentesis)


estado 87

   86 factor: '-' constante .

    $default  reduce usando la regla 86 (factor)


estado 88

   59 seleccion: IF '(' condicion ')' . bloque_sentencias ELSE bloque_sentencias END_IF
   60          | IF '(' condicion ')' . bloque_sentencias END_IF

    SHORT      desplazar e ir al estado 3
    UINT       desplazar e ir al estado 4
    DOUBLE     desplazar e ir al estado 5
    VOID       desplazar e ir al estado 6
    CLASS      desplazar e ir al estado 7
    INTERFACE  desplazar e ir al estado 8
    IMPL       desplazar e ir al estado 9
    IF         desplazar e ir al estado 10
    PRINT      desplazar e ir al estado 11
    FOR        desplazar e ir al estado 12
    ID         desplazar e ir al estado 13
    '{'        desplazar e ir al estado 121

    $default  reduce usando la regla 35 (funcion_declaration)

    sentencia                          ir al estado 122
    declarativa                        ir al estado 16
    ejecutable                         ir al estado 17
    declaracion_variables              ir al estado 18
    clase_declaration                  ir al estado 19
    interface_declaration              ir al estado 20
    implement_declaration              ir al estado 21
    funcion_declaration                ir al estado 22
    distributed_method_implementation  ir al estado 23
    objeto_declaration                 ir al estado 24
    asignacion                         ir al estado 25
    invocacion                         ir al estado 26
    seleccion                          ir al estado 27
    bloque_sentencias                  ir al estado 123
    print                              ir al estado 28
    bucle_for                          ir al estado 29
    acceso_atributo                    ir al estado 30
    tipo                               ir al estado 31


estado 89

   64 comparador: LESS_EQUAL .

    $default  reduce usando la regla 64 (comparador)


estado 90

   65 comparador: GREATER_EQUAL .

    $default  reduce usando la regla 65 (comparador)


estado 91

   66 comparador: EQUAL .

    $default  reduce usando la regla 66 (comparador)


estado 92

   67 comparador: NOT_EQUAL .

    $default  reduce usando la regla 67 (comparador)


estado 93

   62 comparador: '<' .

    $default  reduce usando la regla 62 (comparador)


estado 94

   63 comparador: '>' .

    $default  reduce usando la regla 63 (comparador)


estado 95

   73 expresion: expresion '+' . termino

    ID          desplazar e ir al estado 59
    CTE_SHORT   desplazar e ir al estado 60
    CTE_UINT    desplazar e ir al estado 61
    CTE_DOUBLE  desplazar e ir al estado 62
    '-'         desplazar e ir al estado 64

    termino    ir al estado 124
    factor     ir al estado 68
    constante  ir al estado 69


estado 96

   74 expresion: expresion '-' . termino

    ID          desplazar e ir al estado 59
    CTE_SHORT   desplazar e ir al estado 60
    CTE_UINT    desplazar e ir al estado 61
    CTE_DOUBLE  desplazar e ir al estado 62
    '-'         desplazar e ir al estado 64

    termino    ir al estado 125
    factor     ir al estado 68
    constante  ir al estado 69


estado 97

   61 condicion: expresion comparador . expresion

    SHORT       desplazar e ir al estado 3
    UINT        desplazar e ir al estado 4
    DOUBLE      desplazar e ir al estado 5
    ID          desplazar e ir al estado 59
    CTE_SHORT   desplazar e ir al estado 60
    CTE_UINT    desplazar e ir al estado 61
    CTE_DOUBLE  desplazar e ir al estado 62
    '('         desplazar e ir al estado 63
    '-'         desplazar e ir al estado 64

    expresion  ir al estado 126
    termino    ir al estado 67
    factor     ir al estado 68
    constante  ir al estado 69
    tipo       ir al estado 70


estado 98

   83 termino: termino '*' . factor

    ID          desplazar e ir al estado 59
    CTE_SHORT   desplazar e ir al estado 60
    CTE_UINT    desplazar e ir al estado 61
    CTE_DOUBLE  desplazar e ir al estado 62
    '-'         desplazar e ir al estado 64

    factor     ir al estado 127
    constante  ir al estado 69


estado 99

   84 termino: termino '/' . factor

    ID          desplazar e ir al estado 59
    CTE_SHORT   desplazar e ir al estado 60
    CTE_UINT    desplazar e ir al estado 61
    CTE_DOUBLE  desplazar e ir al estado 62
    '-'         desplazar e ir al estado 64

    factor     ir al estado 128
    constante  ir al estado 69


estado 100

   76 expresion: tipo '(' . expresion ')'

    SHORT       desplazar e ir al estado 3
    UINT        desplazar e ir al estado 4
    DOUBLE      desplazar e ir al estado 5
    ID          desplazar e ir al estado 59
    CTE_SHORT   desplazar e ir al estado 60
    CTE_UINT    desplazar e ir al estado 61
    CTE_DOUBLE  desplazar e ir al estado 62
    '('         desplazar e ir al estado 63
    '-'         desplazar e ir al estado 64

    expresion  ir al estado 129
    termino    ir al estado 67
    factor     ir al estado 68
    constante  ir al estado 69
    tipo       ir al estado 70


estado 101

   71 bucle_for: FOR ID IN RANGE . '(' constante ';' constante ';' constante ')' bloque_sentencias

    '('  desplazar e ir al estado 130


estado 102

   56 invocacion: ID '.' ID '(' . argumentos ')'

    SHORT       desplazar e ir al estado 3
    UINT        desplazar e ir al estado 4
    DOUBLE      desplazar e ir al estado 5
    ID          desplazar e ir al estado 59
    CTE_SHORT   desplazar e ir al estado 60
    CTE_UINT    desplazar e ir al estado 61
    CTE_DOUBLE  desplazar e ir al estado 62
    '('         desplazar e ir al estado 63
    '-'         desplazar e ir al estado 64

    $default  reduce usando la regla 58 (argumentos)

    argumentos  ir al estado 131
    expresion   ir al estado 74
    termino     ir al estado 67
    factor      ir al estado 68
    constante   ir al estado 69
    tipo        ir al estado 70


estado 103

   52 asignacion: ID '.' ID asignador . expresion

    SHORT       desplazar e ir al estado 3
    UINT        desplazar e ir al estado 4
    DOUBLE      desplazar e ir al estado 5
    ID          desplazar e ir al estado 59
    CTE_SHORT   desplazar e ir al estado 60
    CTE_UINT    desplazar e ir al estado 61
    CTE_DOUBLE  desplazar e ir al estado 62
    '('         desplazar e ir al estado 63
    '-'         desplazar e ir al estado 64

    expresion  ir al estado 132
    termino    ir al estado 67
    factor     ir al estado 68
    constante  ir al estado 69
    tipo       ir al estado 70


estado 104

   55 invocacion: ID '(' argumentos ')' .

    $default  reduce usando la regla 55 (invocacion)


estado 105

   48 lista_objetos: lista_objetos ';' objeto .

    $default  reduce usando la regla 48 (lista_objetos)


estado 106

   20 lista_variables: lista_variables ';' ID .

    $default  reduce usando la regla 20 (lista_variables)


estado 107

   34 funcion_declaration: VOID ID '(' parametro ')' . '{' sentencias_metodo '}'

    '{'  desplazar e ir al estado 133


estado 108

   43 parametro: tipo ID .

    $default  reduce usando la regla 43 (parametro)


estado 109

   27 implement_declaration: CLASS ID IMPLEMENT ID '{' . metodos_clase herencia_composicion '}'

    $default  reduce usando la regla 32 (metodos_clase)

    metodos_clase  ir al estado 134


estado 110

   30 atributo_declaration: declaracion_variables . ','

    ','  desplazar e ir al estado 135


estado 111

   28 atributos: atributos atributo_declaration .

    $default  reduce usando la regla 28 (atributos)


estado 112

   22 clase_declaration: CLASS ID '{' atributos metodos_clase . herencia_composicion '}'
   31 metodos_clase: metodos_clase . metodo_declaration

    VOID  desplazar e ir al estado 136

    $default  reduce usando la regla 37 (herencia_composicion)

    metodo_declaration    ir al estado 137
    herencia_composicion  ir al estado 138


estado 113

   26 interface_metodo_declaration: VOID . ID '(' parametro ')' ','

    ID  desplazar e ir al estado 139


estado 114

   23 interface_declaration: INTERFACE ID '{' interface_metodos '}' .

    $default  reduce usando la regla 23 (interface_declaration)


estado 115

   24 interface_metodos: interface_metodos interface_metodo_declaration .

    $default  reduce usando la regla 24 (interface_metodos)


estado 116

   45 distributed_method_implementation: IMPL FOR ID ':' '{' . metodos_clase '}'

    $default  reduce usando la regla 32 (metodos_clase)

    metodos_clase  ir al estado 140


estado 117

   81 expresion_parentesis: '(' expresion_parentesis . ')'

    ')'  desplazar e ir al estado 141


estado 118

   77 expresion: '(' expresion_parentesis ')' .

    $default  reduce usando la regla 77 (expresion)


estado 119

   78 expresion_parentesis: termino '+' . termino

    ID          desplazar e ir al estado 59
    CTE_SHORT   desplazar e ir al estado 60
    CTE_UINT    desplazar e ir al estado 61
    CTE_DOUBLE  desplazar e ir al estado 62
    '-'         desplazar e ir al estado 64

    termino    ir al estado 142
    factor     ir al estado 68
    constante  ir al estado 69


estado 120

   79 expresion_parentesis: termino '-' . termino

    ID          desplazar e ir al estado 59
    CTE_SHORT   desplazar e ir al estado 60
    CTE_UINT    desplazar e ir al estado 61
    CTE_DOUBLE  desplazar e ir al estado 62
    '-'         desplazar e ir al estado 64

    termino    ir al estado 143
    factor     ir al estado 68
    constante  ir al estado 69


estado 121

   69 bloque_sentencias: '{' . sentencias '}'

    SHORT      desplazar e ir al estado 3
    UINT       desplazar e ir al estado 4
    DOUBLE     desplazar e ir al estado 5
    VOID       desplazar e ir al estado 6
    CLASS      desplazar e ir al estado 7
    INTERFACE  desplazar e ir al estado 8
    IMPL       desplazar e ir al estado 9
    IF         desplazar e ir al estado 10
    PRINT      desplazar e ir al estado 11
    FOR        desplazar e ir al estado 12
    ID         desplazar e ir al estado 13

    $default  reduce usando la regla 35 (funcion_declaration)

    sentencias                         ir al estado 144
    sentencia                          ir al estado 15
    declarativa                        ir al estado 16
    ejecutable                         ir al estado 17
    declaracion_variables              ir al estado 18
    clase_declaration                  ir al estado 19
    interface_declaration              ir al estado 20
    implement_declaration              ir al estado 21
    funcion_declaration                ir al estado 22
    distributed_method_implementation  ir al estado 23
    objeto_declaration                 ir al estado 24
    asignacion                         ir al estado 25
    invocacion                         ir al estado 26
    seleccion                          ir al estado 27
    print                              ir al estado 28
    bucle_for                          ir al estado 29
    acceso_atributo                    ir al estado 30
    tipo                               ir al estado 31


estado 122

   68 bloque_sentencias: sentencia .

    $default  reduce usando la regla 68 (bloque_sentencias)


estado 123

   59 seleccion: IF '(' condicion ')' bloque_sentencias . ELSE bloque_sentencias END_IF
   60          | IF '(' condicion ')' bloque_sentencias . END_IF

    ELSE    desplazar e ir al estado 145
    END_IF  desplazar e ir al estado 146


estado 124

   73 expresion: expresion '+' termino .
   83 termino: termino . '*' factor
   84        | termino . '/' factor

    '*'  desplazar e ir al estado 98
    '/'  desplazar e ir al estado 99

    $default  reduce usando la regla 73 (expresion)


estado 125

   74 expresion: expresion '-' termino .
   83 termino: termino . '*' factor
   84        | termino . '/' factor

    '*'  desplazar e ir al estado 98
    '/'  desplazar e ir al estado 99

    $default  reduce usando la regla 74 (expresion)


estado 126

   61 condicion: expresion comparador expresion .
   73 expresion: expresion . '+' termino
   74          | expresion . '-' termino

    '+'  desplazar e ir al estado 95
    '-'  desplazar e ir al estado 96

    $default  reduce usando la regla 61 (condicion)


estado 127

   83 termino: termino '*' factor .

    $default  reduce usando la regla 83 (termino)


estado 128

   84 termino: termino '/' factor .

    $default  reduce usando la regla 84 (termino)


estado 129

   73 expresion: expresion . '+' termino
   74          | expresion . '-' termino
   76          | tipo '(' expresion . ')'

    ')'  desplazar e ir al estado 147
    '+'  desplazar e ir al estado 95
    '-'  desplazar e ir al estado 96


estado 130

   71 bucle_for: FOR ID IN RANGE '(' . constante ';' constante ';' constante ')' bloque_sentencias

    CTE_SHORT   desplazar e ir al estado 60
    CTE_UINT    desplazar e ir al estado 61
    CTE_DOUBLE  desplazar e ir al estado 62

    constante  ir al estado 148


estado 131

   56 invocacion: ID '.' ID '(' argumentos . ')'

    ')'  desplazar e ir al estado 149


estado 132

   52 asignacion: ID '.' ID asignador expresion .
   73 expresion: expresion . '+' termino
   74          | expresion . '-' termino

    '+'  desplazar e ir al estado 95
    '-'  desplazar e ir al estado 96

    $default  reduce usando la regla 52 (asignacion)


estado 133

   34 funcion_declaration: VOID ID '(' parametro ')' '{' . sentencias_metodo '}'

    $default  reduce usando la regla 42 (sentencias_metodo)

    sentencias_metodo  ir al estado 150


estado 134

   27 implement_declaration: CLASS ID IMPLEMENT ID '{' metodos_clase . herencia_composicion '}'
   31 metodos_clase: metodos_clase . metodo_declaration

    VOID  desplazar e ir al estado 136

    $default  reduce usando la regla 37 (herencia_composicion)

    metodo_declaration    ir al estado 137
    herencia_composicion  ir al estado 151


estado 135

   30 atributo_declaration: declaracion_variables ',' .

    $default  reduce usando la regla 30 (atributo_declaration)


estado 136

   33 metodo_declaration: VOID . ID '(' parametro ')' '{' sentencias_metodo '}' ','

    ID  desplazar e ir al estado 152


estado 137

   31 metodos_clase: metodos_clase metodo_declaration .

    $default  reduce usando la regla 31 (metodos_clase)


estado 138

   22 clase_declaration: CLASS ID '{' atributos metodos_clase herencia_composicion . '}'
   36 herencia_composicion: herencia_composicion . ID ','

    ID   desplazar e ir al estado 153
    '}'  desplazar e ir al estado 154


estado 139

   26 interface_metodo_declaration: VOID ID . '(' parametro ')' ','

    '('  desplazar e ir al estado 155


estado 140

   31 metodos_clase: metodos_clase . metodo_declaration
   45 distributed_method_implementation: IMPL FOR ID ':' '{' metodos_clase . '}'

    VOID  desplazar e ir al estado 136
    '}'   desplazar e ir al estado 156

    metodo_declaration  ir al estado 137


estado 141

   81 expresion_parentesis: '(' expresion_parentesis ')' .

    $default  reduce usando la regla 81 (expresion_parentesis)


estado 142

   78 expresion_parentesis: termino '+' termino .
   83 termino: termino . '*' factor
   84        | termino . '/' factor

    '*'  desplazar e ir al estado 98
    '/'  desplazar e ir al estado 99

    $default  reduce usando la regla 78 (expresion_parentesis)


estado 143

   79 expresion_parentesis: termino '-' termino .
   83 termino: termino . '*' factor
   84        | termino . '/' factor

    '*'  desplazar e ir al estado 98
    '/'  desplazar e ir al estado 99

    $default  reduce usando la regla 79 (expresion_parentesis)


estado 144

    3 sentencias: sentencias . sentencia
   69 bloque_sentencias: '{' sentencias . '}'

    SHORT      desplazar e ir al estado 3
    UINT       desplazar e ir al estado 4
    DOUBLE     desplazar e ir al estado 5
    VOID       desplazar e ir al estado 6
    CLASS      desplazar e ir al estado 7
    INTERFACE  desplazar e ir al estado 8
    IMPL       desplazar e ir al estado 9
    IF         desplazar e ir al estado 10
    PRINT      desplazar e ir al estado 11
    FOR        desplazar e ir al estado 12
    ID         desplazar e ir al estado 13
    '}'        desplazar e ir al estado 157

    $default  reduce usando la regla 35 (funcion_declaration)

    sentencia                          ir al estado 49
    declarativa                        ir al estado 16
    ejecutable                         ir al estado 17
    declaracion_variables              ir al estado 18
    clase_declaration                  ir al estado 19
    interface_declaration              ir al estado 20
    implement_declaration              ir al estado 21
    funcion_declaration                ir al estado 22
    distributed_method_implementation  ir al estado 23
    objeto_declaration                 ir al estado 24
    asignacion                         ir al estado 25
    invocacion                         ir al estado 26
    seleccion                          ir al estado 27
    print                              ir al estado 28
    bucle_for                          ir al estado 29
    acceso_atributo                    ir al estado 30
    tipo                               ir al estado 31


estado 145

   59 seleccion: IF '(' condicion ')' bloque_sentencias ELSE . bloque_sentencias END_IF

    SHORT      desplazar e ir al estado 3
    UINT       desplazar e ir al estado 4
    DOUBLE     desplazar e ir al estado 5
    VOID       desplazar e ir al estado 6
    CLASS      desplazar e ir al estado 7
    INTERFACE  desplazar e ir al estado 8
    IMPL       desplazar e ir al estado 9
    IF         desplazar e ir al estado 10
    PRINT      desplazar e ir al estado 11
    FOR        desplazar e ir al estado 12
    ID         desplazar e ir al estado 13
    '{'        desplazar e ir al estado 121

    $default  reduce usando la regla 35 (funcion_declaration)

    sentencia                          ir al estado 122
    declarativa                        ir al estado 16
    ejecutable                         ir al estado 17
    declaracion_variables              ir al estado 18
    clase_declaration                  ir al estado 19
    interface_declaration              ir al estado 20
    implement_declaration              ir al estado 21
    funcion_declaration                ir al estado 22
    distributed_method_implementation  ir al estado 23
    objeto_declaration                 ir al estado 24
    asignacion                         ir al estado 25
    invocacion                         ir al estado 26
    seleccion                          ir al estado 27
    bloque_sentencias                  ir al estado 158
    print                              ir al estado 28
    bucle_for                          ir al estado 29
    acceso_atributo                    ir al estado 30
    tipo                               ir al estado 31


estado 146

   60 seleccion: IF '(' condicion ')' bloque_sentencias END_IF .

    $default  reduce usando la regla 60 (seleccion)


estado 147

   76 expresion: tipo '(' expresion ')' .

    $default  reduce usando la regla 76 (expresion)


estado 148

   71 bucle_for: FOR ID IN RANGE '(' constante . ';' constante ';' constante ')' bloque_sentencias

    ';'  desplazar e ir al estado 159


estado 149

   56 invocacion: ID '.' ID '(' argumentos ')' .

    $default  reduce usando la regla 56 (invocacion)


estado 150

   34 funcion_declaration: VOID ID '(' parametro ')' '{' sentencias_metodo . '}'
   38 sentencias_metodo: sentencias_metodo . declaracion_variables ','
   39                  | sentencias_metodo . retorno ','
   40                  | sentencias_metodo . ejecutable ','
   41                  | sentencias_metodo . funcion_declaration ','

    SHORT   desplazar e ir al estado 3
    UINT    desplazar e ir al estado 4
    DOUBLE  desplazar e ir al estado 5
    VOID    desplazar e ir al estado 6
    IF      desplazar e ir al estado 10
    PRINT   desplazar e ir al estado 11
    FOR     desplazar e ir al estado 12
    RETURN  desplazar e ir al estado 160
    ID      desplazar e ir al estado 161
    '}'     desplazar e ir al estado 162

    $default  reduce usando la regla 35 (funcion_declaration)

    ejecutable             ir al estado 163
    declaracion_variables  ir al estado 164
    funcion_declaration    ir al estado 165
    retorno                ir al estado 166
    asignacion             ir al estado 25
    invocacion             ir al estado 26
    seleccion              ir al estado 27
    print                  ir al estado 28
    bucle_for              ir al estado 29
    acceso_atributo        ir al estado 30
    tipo                   ir al estado 31


estado 151

   27 implement_declaration: CLASS ID IMPLEMENT ID '{' metodos_clase herencia_composicion . '}'
   36 herencia_composicion: herencia_composicion . ID ','

    ID   desplazar e ir al estado 153
    '}'  desplazar e ir al estado 167


estado 152

   33 metodo_declaration: VOID ID . '(' parametro ')' '{' sentencias_metodo '}' ','

    '('  desplazar e ir al estado 168


estado 153

   36 herencia_composicion: herencia_composicion ID . ','

    ','  desplazar e ir al estado 169


estado 154

   22 clase_declaration: CLASS ID '{' atributos metodos_clase herencia_composicion '}' .

    $default  reduce usando la regla 22 (clase_declaration)


estado 155

   26 interface_metodo_declaration: VOID ID '(' . parametro ')' ','

    SHORT   desplazar e ir al estado 3
    UINT    desplazar e ir al estado 4
    DOUBLE  desplazar e ir al estado 5

    $default  reduce usando la regla 44 (parametro)

    parametro  ir al estado 170
    tipo       ir al estado 79


estado 156

   45 distributed_method_implementation: IMPL FOR ID ':' '{' metodos_clase '}' .

    $default  reduce usando la regla 45 (distributed_method_implementation)


estado 157

   69 bloque_sentencias: '{' sentencias '}' .

    $default  reduce usando la regla 69 (bloque_sentencias)


estado 158

   59 seleccion: IF '(' condicion ')' bloque_sentencias ELSE bloque_sentencias . END_IF

    END_IF  desplazar e ir al estado 171


estado 159

   71 bucle_for: FOR ID IN RANGE '(' constante ';' . constante ';' constante ')' bloque_sentencias

    CTE_SHORT   desplazar e ir al estado 60
    CTE_UINT    desplazar e ir al estado 61
    CTE_DOUBLE  desplazar e ir al estado 62

    constante  ir al estado 172


estado 160

   46 retorno: RETURN .

    $default  reduce usando la regla 46 (retorno)


estado 161

   51 asignacion: ID . asignador expresion
   52           | ID . '.' ID asignador expresion
   55 invocacion: ID . '(' argumentos ')'
   56           | ID . '.' ID '(' argumentos ')'
   72 acceso_atributo: ID . '.' ID

    PLUS_EQUAL  desplazar e ir al estado 40
    '='         desplazar e ir al estado 41
    '.'         desplazar e ir al estado 42
    '('         desplazar e ir al estado 44

    asignador  ir al estado 47


estado 162

   34 funcion_declaration: VOID ID '(' parametro ')' '{' sentencias_metodo '}' .

    $default  reduce usando la regla 34 (funcion_declaration)


estado 163

   40 sentencias_metodo: sentencias_metodo ejecutable . ','

    ','  desplazar e ir al estado 173


estado 164

   38 sentencias_metodo: sentencias_metodo declaracion_variables . ','

    ','  desplazar e ir al estado 174


estado 165

   41 sentencias_metodo: sentencias_metodo funcion_declaration . ','

    ','  desplazar e ir al estado 175


estado 166

   39 sentencias_metodo: sentencias_metodo retorno . ','

    ','  desplazar e ir al estado 176


estado 167

   27 implement_declaration: CLASS ID IMPLEMENT ID '{' metodos_clase herencia_composicion '}' .

    $default  reduce usando la regla 27 (implement_declaration)


estado 168

   33 metodo_declaration: VOID ID '(' . parametro ')' '{' sentencias_metodo '}' ','

    SHORT   desplazar e ir al estado 3
    UINT    desplazar e ir al estado 4
    DOUBLE  desplazar e ir al estado 5

    $default  reduce usando la regla 44 (parametro)

    parametro  ir al estado 177
    tipo       ir al estado 79


estado 169

   36 herencia_composicion: herencia_composicion ID ',' .

    $default  reduce usando la regla 36 (herencia_composicion)


estado 170

   26 interface_metodo_declaration: VOID ID '(' parametro . ')' ','

    ')'  desplazar e ir al estado 178


estado 171

   59 seleccion: IF '(' condicion ')' bloque_sentencias ELSE bloque_sentencias END_IF .

    $default  reduce usando la regla 59 (seleccion)


estado 172

   71 bucle_for: FOR ID IN RANGE '(' constante ';' constante . ';' constante ')' bloque_sentencias

    ';'  desplazar e ir al estado 179


estado 173

   40 sentencias_metodo: sentencias_metodo ejecutable ',' .

    $default  reduce usando la regla 40 (sentencias_metodo)


estado 174

   38 sentencias_metodo: sentencias_metodo declaracion_variables ',' .

    $default  reduce usando la regla 38 (sentencias_metodo)


estado 175

   41 sentencias_metodo: sentencias_metodo funcion_declaration ',' .

    $default  reduce usando la regla 41 (sentencias_metodo)


estado 176

   39 sentencias_metodo: sentencias_metodo retorno ',' .

    $default  reduce usando la regla 39 (sentencias_metodo)


estado 177

   33 metodo_declaration: VOID ID '(' parametro . ')' '{' sentencias_metodo '}' ','

    ')'  desplazar e ir al estado 180


estado 178

   26 interface_metodo_declaration: VOID ID '(' parametro ')' . ','

    ','  desplazar e ir al estado 181


estado 179

   71 bucle_for: FOR ID IN RANGE '(' constante ';' constante ';' . constante ')' bloque_sentencias

    CTE_SHORT   desplazar e ir al estado 60
    CTE_UINT    desplazar e ir al estado 61
    CTE_DOUBLE  desplazar e ir al estado 62

    constante  ir al estado 182


estado 180

   33 metodo_declaration: VOID ID '(' parametro ')' . '{' sentencias_metodo '}' ','

    '{'  desplazar e ir al estado 183


estado 181

   26 interface_metodo_declaration: VOID ID '(' parametro ')' ',' .

    $default  reduce usando la regla 26 (interface_metodo_declaration)


estado 182

   71 bucle_for: FOR ID IN RANGE '(' constante ';' constante ';' constante . ')' bloque_sentencias

    ')'  desplazar e ir al estado 184


estado 183

   33 metodo_declaration: VOID ID '(' parametro ')' '{' . sentencias_metodo '}' ','

    $default  reduce usando la regla 42 (sentencias_metodo)

    sentencias_metodo  ir al estado 185


estado 184

   71 bucle_for: FOR ID IN RANGE '(' constante ';' constante ';' constante ')' . bloque_sentencias

    SHORT      desplazar e ir al estado 3
    UINT       desplazar e ir al estado 4
    DOUBLE     desplazar e ir al estado 5
    VOID       desplazar e ir al estado 6
    CLASS      desplazar e ir al estado 7
    INTERFACE  desplazar e ir al estado 8
    IMPL       desplazar e ir al estado 9
    IF         desplazar e ir al estado 10
    PRINT      desplazar e ir al estado 11
    FOR        desplazar e ir al estado 12
    ID         desplazar e ir al estado 13
    '{'        desplazar e ir al estado 121

    $default  reduce usando la regla 35 (funcion_declaration)

    sentencia                          ir al estado 122
    declarativa                        ir al estado 16
    ejecutable                         ir al estado 17
    declaracion_variables              ir al estado 18
    clase_declaration                  ir al estado 19
    interface_declaration              ir al estado 20
    implement_declaration              ir al estado 21
    funcion_declaration                ir al estado 22
    distributed_method_implementation  ir al estado 23
    objeto_declaration                 ir al estado 24
    asignacion                         ir al estado 25
    invocacion                         ir al estado 26
    seleccion                          ir al estado 27
    bloque_sentencias                  ir al estado 186
    print                              ir al estado 28
    bucle_for                          ir al estado 29
    acceso_atributo                    ir al estado 30
    tipo                               ir al estado 31


estado 185

   33 metodo_declaration: VOID ID '(' parametro ')' '{' sentencias_metodo . '}' ','
   38 sentencias_metodo: sentencias_metodo . declaracion_variables ','
   39                  | sentencias_metodo . retorno ','
   40                  | sentencias_metodo . ejecutable ','
   41                  | sentencias_metodo . funcion_declaration ','

    SHORT   desplazar e ir al estado 3
    UINT    desplazar e ir al estado 4
    DOUBLE  desplazar e ir al estado 5
    VOID    desplazar e ir al estado 6
    IF      desplazar e ir al estado 10
    PRINT   desplazar e ir al estado 11
    FOR     desplazar e ir al estado 12
    RETURN  desplazar e ir al estado 160
    ID      desplazar e ir al estado 161
    '}'     desplazar e ir al estado 187

    $default  reduce usando la regla 35 (funcion_declaration)

    ejecutable             ir al estado 163
    declaracion_variables  ir al estado 164
    funcion_declaration    ir al estado 165
    retorno                ir al estado 166
    asignacion             ir al estado 25
    invocacion             ir al estado 26
    seleccion              ir al estado 27
    print                  ir al estado 28
    bucle_for              ir al estado 29
    acceso_atributo        ir al estado 30
    tipo                   ir al estado 31


estado 186

   71 bucle_for: FOR ID IN RANGE '(' constante ';' constante ';' constante ')' bloque_sentencias .

    $default  reduce usando la regla 71 (bucle_for)


estado 187

   33 metodo_declaration: VOID ID '(' parametro ')' '{' sentencias_metodo '}' . ','

    ','  desplazar e ir al estado 188


estado 188

   33 metodo_declaration: VOID ID '(' parametro ')' '{' sentencias_metodo '}' ',' .

    $default  reduce usando la regla 33 (metodo_declaration)
